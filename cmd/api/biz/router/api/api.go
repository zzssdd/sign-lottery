// Code generated by hertz generator. DO NOT EDIT.

package api

import (
	"sign-lottery/cmd/api/biz/handler/api"

	"github.com/cloudwego/hertz/pkg/app/server"
)

/*
 This file will register all the routes of the services in the master idl.
 And it will update automatically when you use the "update" command for the idl.
 So don't modify the contents of the file, or your code will be deleted when it is updated.
*/

// Register register routes based on the IDL 'api.${HTTP Method}' annotation.
func Register(r *server.Hertz) {

	root := r.Group("/", rootMw()...)
	{
		_activity := root.Group("/activity", _activityMw()...)
		{
			_add := _activity.Group("/add", _addMw()...)
			_add.POST("/", append(__ctivity_ddMw(), api.ActivityAdd)...)
		}
		{
			_del := _activity.Group("/del", _delMw()...)
			_del.DELETE("/", append(__ctivitydelMw(), api.ActivityDel)...)
		}
		{
			_gid := _activity.Group("/gid", _gidMw()...)
			_gid.GET("/", append(_get_ctivitybygidMw(), api.GetActivityByGid)...)
		}
		{
			_id := _activity.Group("/id", _idMw()...)
			_id.GET("/", append(_get_ctivitybyidMw(), api.GetActivityById)...)
		}
		{
			_list := _activity.Group("/list", _listMw()...)
			_list.GET("/", append(_get_ll_ctivityMw(), api.GetAllActivity)...)
		}
		{
			_update := _activity.Group("/update", _updateMw()...)
			_update.PUT("/", append(__ctivityupdateMw(), api.ActivityUpdate)...)
		}
	}
	{
		_admin := root.Group("/admin", _adminMw()...)
		{
			_login := _admin.Group("/login", _loginMw()...)
			_login.POST("/", append(__dminloginMw(), api.AdminLogin)...)
		}
		{
			_user := _admin.Group("/user", _userMw()...)
			_user.DELETE("/", append(_userdelMw(), api.UserDel)...)
		}
		{
			_userlist := _admin.Group("/userlist", _userlistMw()...)
			_userlist.GET("/", append(_get_lluserMw(), api.GetAllUser)...)
		}
	}
	{
		_group := root.Group("/group", _groupMw()...)
		{
			_add0 := _group.Group("/add", _add0Mw()...)
			_add0.POST("/", append(_creategroupMw(), api.CreateGroup)...)
		}
		{
			_del0 := _group.Group("/del", _del0Mw()...)
			_del0.DELETE("/", append(_groupdelMw(), api.GroupDel)...)
		}
		{
			_id0 := _group.Group("/id", _id0Mw()...)
			_id0.GET("/", append(_getgroupbyidMw(), api.GetGroupById)...)
		}
		{
			_join := _group.Group("/join", _joinMw()...)
			_join.POST("/", append(_joingroupMw(), api.JoinGroup)...)
		}
		{
			_list0 := _group.Group("/list", _list0Mw()...)
			_list0.GET("/", append(_get_llgroupMw(), api.GetAllGroup)...)
		}
		{
			_put := _group.Group("/put", _putMw()...)
			_put.PUT("/", append(_groupupdateMw(), api.GroupUpdate)...)
		}
	}
	{
		_order := root.Group("/order", _orderMw()...)
		{
			_list1 := _order.Group("/list", _list1Mw()...)
			_list1.GET("/", append(_get_llorderMw(), api.GetAllOrder)...)
		}
		{
			_uid := _order.Group("/uid", _uidMw()...)
			_uid.GET("/", append(_getuserorderMw(), api.GetUserOrder)...)
		}
	}
	{
		_prize := root.Group("/prize", _prizeMw()...)
		{
			_add1 := _prize.Group("/add", _add1Mw()...)
			_add1.POST("/", append(_prize_ddMw(), api.PrizeAdd)...)
		}
		{
			_aid := _prize.Group("/aid", _aidMw()...)
			_aid.GET("/", append(_getprizeby_idMw(), api.GetPrizeByAid)...)
		}
		{
			_choose := _prize.Group("/choose", _chooseMw()...)
			_choose.GET("/", append(_choose0Mw(), api.Choose)...)
		}
		{
			_del1 := _prize.Group("/del", _del1Mw()...)
			_del1.DELETE("/", append(_prizedelMw(), api.PrizeDel)...)
		}
		{
			_id1 := _prize.Group("/id", _id1Mw()...)
			_id1.GET("/", append(_getprizebyidMw(), api.GetPrizeById)...)
		}
		{
			_update0 := _prize.Group("/update", _update0Mw()...)
			_update0.PUT("/", append(_prizeupdateMw(), api.PrizeUpdate)...)
		}
	}
	{
		_sign := root.Group("/sign", _signMw()...)
		{
			_add2 := _sign.Group("/add", _add2Mw()...)
			_add2.POST("/", append(_sign0Mw(), api.Sign)...)
		}
		{
			_leave := _sign.Group("/leave", _leaveMw()...)
			_leave.POST("/", append(__skleaveMw(), api.AskLeave)...)
		}
		{
			_month := _sign.Group("/month", _monthMw()...)
			_month.GET("/", append(_getmonthsignMw(), api.GetMonthSign)...)
		}
		{
			_pos := _sign.Group("/pos", _posMw()...)
			_pos.POST("/", append(_signpos_ddMw(), api.SignPosAdd)...)
			_pos.DELETE("/", append(_signposdelMw(), api.SignPosDel)...)
			_pos.GET("/", append(_getsignposMw(), api.GetSignPos)...)
		}
		{
			_record := _sign.Group("/record", _recordMw()...)
			_record.GET("/", append(_getuserrecordMw(), api.GetUserRecord)...)
		}
		{
			_recordlist := _sign.Group("/recordlist", _recordlistMw()...)
			_recordlist.GET("/", append(_get_llrecordMw(), api.GetAllRecord)...)
		}
	}
	{
		_user0 := root.Group("/user", _user0Mw()...)
		{
			_address := _user0.Group("/address", _addressMw()...)
			_address.PUT("/", append(_changeuser_ddressMw(), api.ChangeUserAddress)...)
		}
		{
			_avater := _user0.Group("/avater", _avaterMw()...)
			_avater.PUT("/", append(_changeuser_vaterMw(), api.ChangeUserAvater)...)
		}
		{
			_email := _user0.Group("/email", _emailMw()...)
			_email.POST("/", append(_sendemailMw(), api.SendEmail)...)
		}
		{
			_gid0 := _user0.Group("/gid", _gid0Mw()...)
			_gid0.GET("/", append(_getuserbygidMw(), api.GetUserByGid)...)
		}
		{
			_id2 := _user0.Group("/id", _id2Mw()...)
			_id2.GET("/", append(_getuserbyidMw(), api.GetUserById)...)
		}
		{
			_login0 := _user0.Group("/login", _login0Mw()...)
			_login0.POST("/", append(_login1Mw(), api.Login)...)
		}
		{
			_password := _user0.Group("/password", _passwordMw()...)
			_password.PUT("/", append(_changeuserpasswordMw(), api.ChangeUserPassword)...)
		}
		{
			_registe := _user0.Group("/registe", _registeMw()...)
			_registe.POST("/", append(_registe0Mw(), api.Registe)...)
		}
	}
}
