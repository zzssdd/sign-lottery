// Code generated by Kitex v0.5.1. DO NOT EDIT.

package baseservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	user "sign-lottery/kitex_gen/user"
)

func serviceInfo() *kitex.ServiceInfo {
	return baseServiceServiceInfo
}

var baseServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "BaseService"
	handlerType := (*user.BaseService)(nil)
	methods := map[string]kitex.MethodInfo{
		"SendEmail":          kitex.NewMethodInfo(sendEmailHandler, newBaseServiceSendEmailArgs, newBaseServiceSendEmailResult, false),
		"Registe":            kitex.NewMethodInfo(registeHandler, newBaseServiceRegisteArgs, newBaseServiceRegisteResult, false),
		"Login":              kitex.NewMethodInfo(loginHandler, newBaseServiceLoginArgs, newBaseServiceLoginResult, false),
		"AdminLogin":         kitex.NewMethodInfo(adminLoginHandler, newBaseServiceAdminLoginArgs, newBaseServiceAdminLoginResult, false),
		"GetUserById":        kitex.NewMethodInfo(getUserByIdHandler, newBaseServiceGetUserByIdArgs, newBaseServiceGetUserByIdResult, false),
		"GetAllUser":         kitex.NewMethodInfo(getAllUserHandler, newBaseServiceGetAllUserArgs, newBaseServiceGetAllUserResult, false),
		"GetUserByGid":       kitex.NewMethodInfo(getUserByGidHandler, newBaseServiceGetUserByGidArgs, newBaseServiceGetUserByGidResult, false),
		"ChangeUserAvater":   kitex.NewMethodInfo(changeUserAvaterHandler, newBaseServiceChangeUserAvaterArgs, newBaseServiceChangeUserAvaterResult, false),
		"ChangeUserPassword": kitex.NewMethodInfo(changeUserPasswordHandler, newBaseServiceChangeUserPasswordArgs, newBaseServiceChangeUserPasswordResult, false),
		"ChangeUserAddress":  kitex.NewMethodInfo(changeUserAddressHandler, newBaseServiceChangeUserAddressArgs, newBaseServiceChangeUserAddressResult, false),
		"UserDel":            kitex.NewMethodInfo(userDelHandler, newBaseServiceUserDelArgs, newBaseServiceUserDelResult, false),
		"CreateGroup":        kitex.NewMethodInfo(createGroupHandler, newBaseServiceCreateGroupArgs, newBaseServiceCreateGroupResult, false),
		"JoinGroup":          kitex.NewMethodInfo(joinGroupHandler, newBaseServiceJoinGroupArgs, newBaseServiceJoinGroupResult, false),
		"GetGroupById":       kitex.NewMethodInfo(getGroupByIdHandler, newBaseServiceGetGroupByIdArgs, newBaseServiceGetGroupByIdResult, false),
		"GetAllGroup":        kitex.NewMethodInfo(getAllGroupHandler, newBaseServiceGetAllGroupArgs, newBaseServiceGetAllGroupResult, false),
		"GroupUpdate":        kitex.NewMethodInfo(groupUpdateHandler, newBaseServiceGroupUpdateArgs, newBaseServiceGroupUpdateResult, false),
		"GroupDel":           kitex.NewMethodInfo(groupDelHandler, newBaseServiceGroupDelArgs, newBaseServiceGroupDelResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.1",
		Extra:           extra,
	}
	return svcInfo
}

func sendEmailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.BaseServiceSendEmailArgs)
	realResult := result.(*user.BaseServiceSendEmailResult)
	success, err := handler.(user.BaseService).SendEmail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceSendEmailArgs() interface{} {
	return user.NewBaseServiceSendEmailArgs()
}

func newBaseServiceSendEmailResult() interface{} {
	return user.NewBaseServiceSendEmailResult()
}

func registeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.BaseServiceRegisteArgs)
	realResult := result.(*user.BaseServiceRegisteResult)
	success, err := handler.(user.BaseService).Registe(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceRegisteArgs() interface{} {
	return user.NewBaseServiceRegisteArgs()
}

func newBaseServiceRegisteResult() interface{} {
	return user.NewBaseServiceRegisteResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.BaseServiceLoginArgs)
	realResult := result.(*user.BaseServiceLoginResult)
	success, err := handler.(user.BaseService).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceLoginArgs() interface{} {
	return user.NewBaseServiceLoginArgs()
}

func newBaseServiceLoginResult() interface{} {
	return user.NewBaseServiceLoginResult()
}

func adminLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.BaseServiceAdminLoginArgs)
	realResult := result.(*user.BaseServiceAdminLoginResult)
	success, err := handler.(user.BaseService).AdminLogin(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceAdminLoginArgs() interface{} {
	return user.NewBaseServiceAdminLoginArgs()
}

func newBaseServiceAdminLoginResult() interface{} {
	return user.NewBaseServiceAdminLoginResult()
}

func getUserByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.BaseServiceGetUserByIdArgs)
	realResult := result.(*user.BaseServiceGetUserByIdResult)
	success, err := handler.(user.BaseService).GetUserById(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceGetUserByIdArgs() interface{} {
	return user.NewBaseServiceGetUserByIdArgs()
}

func newBaseServiceGetUserByIdResult() interface{} {
	return user.NewBaseServiceGetUserByIdResult()
}

func getAllUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.BaseServiceGetAllUserArgs)
	realResult := result.(*user.BaseServiceGetAllUserResult)
	success, err := handler.(user.BaseService).GetAllUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceGetAllUserArgs() interface{} {
	return user.NewBaseServiceGetAllUserArgs()
}

func newBaseServiceGetAllUserResult() interface{} {
	return user.NewBaseServiceGetAllUserResult()
}

func getUserByGidHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.BaseServiceGetUserByGidArgs)
	realResult := result.(*user.BaseServiceGetUserByGidResult)
	success, err := handler.(user.BaseService).GetUserByGid(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceGetUserByGidArgs() interface{} {
	return user.NewBaseServiceGetUserByGidArgs()
}

func newBaseServiceGetUserByGidResult() interface{} {
	return user.NewBaseServiceGetUserByGidResult()
}

func changeUserAvaterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.BaseServiceChangeUserAvaterArgs)
	realResult := result.(*user.BaseServiceChangeUserAvaterResult)
	success, err := handler.(user.BaseService).ChangeUserAvater(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceChangeUserAvaterArgs() interface{} {
	return user.NewBaseServiceChangeUserAvaterArgs()
}

func newBaseServiceChangeUserAvaterResult() interface{} {
	return user.NewBaseServiceChangeUserAvaterResult()
}

func changeUserPasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.BaseServiceChangeUserPasswordArgs)
	realResult := result.(*user.BaseServiceChangeUserPasswordResult)
	success, err := handler.(user.BaseService).ChangeUserPassword(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceChangeUserPasswordArgs() interface{} {
	return user.NewBaseServiceChangeUserPasswordArgs()
}

func newBaseServiceChangeUserPasswordResult() interface{} {
	return user.NewBaseServiceChangeUserPasswordResult()
}

func changeUserAddressHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.BaseServiceChangeUserAddressArgs)
	realResult := result.(*user.BaseServiceChangeUserAddressResult)
	success, err := handler.(user.BaseService).ChangeUserAddress(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceChangeUserAddressArgs() interface{} {
	return user.NewBaseServiceChangeUserAddressArgs()
}

func newBaseServiceChangeUserAddressResult() interface{} {
	return user.NewBaseServiceChangeUserAddressResult()
}

func userDelHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.BaseServiceUserDelArgs)
	realResult := result.(*user.BaseServiceUserDelResult)
	success, err := handler.(user.BaseService).UserDel(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceUserDelArgs() interface{} {
	return user.NewBaseServiceUserDelArgs()
}

func newBaseServiceUserDelResult() interface{} {
	return user.NewBaseServiceUserDelResult()
}

func createGroupHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.BaseServiceCreateGroupArgs)
	realResult := result.(*user.BaseServiceCreateGroupResult)
	success, err := handler.(user.BaseService).CreateGroup(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceCreateGroupArgs() interface{} {
	return user.NewBaseServiceCreateGroupArgs()
}

func newBaseServiceCreateGroupResult() interface{} {
	return user.NewBaseServiceCreateGroupResult()
}

func joinGroupHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.BaseServiceJoinGroupArgs)
	realResult := result.(*user.BaseServiceJoinGroupResult)
	success, err := handler.(user.BaseService).JoinGroup(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceJoinGroupArgs() interface{} {
	return user.NewBaseServiceJoinGroupArgs()
}

func newBaseServiceJoinGroupResult() interface{} {
	return user.NewBaseServiceJoinGroupResult()
}

func getGroupByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.BaseServiceGetGroupByIdArgs)
	realResult := result.(*user.BaseServiceGetGroupByIdResult)
	success, err := handler.(user.BaseService).GetGroupById(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceGetGroupByIdArgs() interface{} {
	return user.NewBaseServiceGetGroupByIdArgs()
}

func newBaseServiceGetGroupByIdResult() interface{} {
	return user.NewBaseServiceGetGroupByIdResult()
}

func getAllGroupHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.BaseServiceGetAllGroupArgs)
	realResult := result.(*user.BaseServiceGetAllGroupResult)
	success, err := handler.(user.BaseService).GetAllGroup(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceGetAllGroupArgs() interface{} {
	return user.NewBaseServiceGetAllGroupArgs()
}

func newBaseServiceGetAllGroupResult() interface{} {
	return user.NewBaseServiceGetAllGroupResult()
}

func groupUpdateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.BaseServiceGroupUpdateArgs)
	realResult := result.(*user.BaseServiceGroupUpdateResult)
	success, err := handler.(user.BaseService).GroupUpdate(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceGroupUpdateArgs() interface{} {
	return user.NewBaseServiceGroupUpdateArgs()
}

func newBaseServiceGroupUpdateResult() interface{} {
	return user.NewBaseServiceGroupUpdateResult()
}

func groupDelHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.BaseServiceGroupDelArgs)
	realResult := result.(*user.BaseServiceGroupDelResult)
	success, err := handler.(user.BaseService).GroupDel(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceGroupDelArgs() interface{} {
	return user.NewBaseServiceGroupDelArgs()
}

func newBaseServiceGroupDelResult() interface{} {
	return user.NewBaseServiceGroupDelResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SendEmail(ctx context.Context, req *user.EmailRequest) (r *user.BaseResponse, err error) {
	var _args user.BaseServiceSendEmailArgs
	_args.Req = req
	var _result user.BaseServiceSendEmailResult
	if err = p.c.Call(ctx, "SendEmail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Registe(ctx context.Context, req *user.RegisterRequest) (r *user.BaseResponse, err error) {
	var _args user.BaseServiceRegisteArgs
	_args.Req = req
	var _result user.BaseServiceRegisteResult
	if err = p.c.Call(ctx, "Registe", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, req *user.LoginRequest) (r *user.LoginResponse, err error) {
	var _args user.BaseServiceLoginArgs
	_args.Req = req
	var _result user.BaseServiceLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AdminLogin(ctx context.Context, req *user.AdminLoginRequest) (r *user.AdminLoginResponse, err error) {
	var _args user.BaseServiceAdminLoginArgs
	_args.Req = req
	var _result user.BaseServiceAdminLoginResult
	if err = p.c.Call(ctx, "AdminLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserById(ctx context.Context, req *user.GetUserByIdRequest) (r *user.UserResponse, err error) {
	var _args user.BaseServiceGetUserByIdArgs
	_args.Req = req
	var _result user.BaseServiceGetUserByIdResult
	if err = p.c.Call(ctx, "GetUserById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAllUser(ctx context.Context, req *user.GetAllUserRequest) (r *user.UsersResponse, err error) {
	var _args user.BaseServiceGetAllUserArgs
	_args.Req = req
	var _result user.BaseServiceGetAllUserResult
	if err = p.c.Call(ctx, "GetAllUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserByGid(ctx context.Context, req *user.GetUserByGidRequest) (r *user.UsersResponse, err error) {
	var _args user.BaseServiceGetUserByGidArgs
	_args.Req = req
	var _result user.BaseServiceGetUserByGidResult
	if err = p.c.Call(ctx, "GetUserByGid", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ChangeUserAvater(ctx context.Context, req *user.ChangeUserAvaterRequest) (r *user.BaseResponse, err error) {
	var _args user.BaseServiceChangeUserAvaterArgs
	_args.Req = req
	var _result user.BaseServiceChangeUserAvaterResult
	if err = p.c.Call(ctx, "ChangeUserAvater", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ChangeUserPassword(ctx context.Context, req *user.ChangePasswordRequest) (r *user.BaseResponse, err error) {
	var _args user.BaseServiceChangeUserPasswordArgs
	_args.Req = req
	var _result user.BaseServiceChangeUserPasswordResult
	if err = p.c.Call(ctx, "ChangeUserPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ChangeUserAddress(ctx context.Context, req *user.ChangeAddressRequest) (r *user.BaseResponse, err error) {
	var _args user.BaseServiceChangeUserAddressArgs
	_args.Req = req
	var _result user.BaseServiceChangeUserAddressResult
	if err = p.c.Call(ctx, "ChangeUserAddress", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserDel(ctx context.Context, req *user.UserDelRequest) (r *user.BaseResponse, err error) {
	var _args user.BaseServiceUserDelArgs
	_args.Req = req
	var _result user.BaseServiceUserDelResult
	if err = p.c.Call(ctx, "UserDel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateGroup(ctx context.Context, req *user.CreateGroupRequest) (r *user.BaseResponse, err error) {
	var _args user.BaseServiceCreateGroupArgs
	_args.Req = req
	var _result user.BaseServiceCreateGroupResult
	if err = p.c.Call(ctx, "CreateGroup", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) JoinGroup(ctx context.Context, req *user.JoinGroupRequest) (r *user.BaseResponse, err error) {
	var _args user.BaseServiceJoinGroupArgs
	_args.Req = req
	var _result user.BaseServiceJoinGroupResult
	if err = p.c.Call(ctx, "JoinGroup", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetGroupById(ctx context.Context, req *user.GetGroupByIdRequest) (r *user.GroupResponse, err error) {
	var _args user.BaseServiceGetGroupByIdArgs
	_args.Req = req
	var _result user.BaseServiceGetGroupByIdResult
	if err = p.c.Call(ctx, "GetGroupById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAllGroup(ctx context.Context, req *user.GetAllGroupRequest) (r *user.GroupsResponse, err error) {
	var _args user.BaseServiceGetAllGroupArgs
	_args.Req = req
	var _result user.BaseServiceGetAllGroupResult
	if err = p.c.Call(ctx, "GetAllGroup", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GroupUpdate(ctx context.Context, req *user.GroupUpdateRequest) (r *user.BaseResponse, err error) {
	var _args user.BaseServiceGroupUpdateArgs
	_args.Req = req
	var _result user.BaseServiceGroupUpdateResult
	if err = p.c.Call(ctx, "GroupUpdate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GroupDel(ctx context.Context, req *user.GroupDelRequest) (r *user.BaseResponse, err error) {
	var _args user.BaseServiceGroupDelArgs
	_args.Req = req
	var _result user.BaseServiceGroupDelResult
	if err = p.c.Call(ctx, "GroupDel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
