// Code generated by thriftgo (0.2.9). DO NOT EDIT.

package lottery

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type Activity struct {
	Id        int32  `thrift:"id,1,required" frugal:"1,required,i32" json:"id"`
	CreatTime string `thrift:"creat_time,2,required" frugal:"2,required,string" json:"creat_time"`
	Name      string `thrift:"name,3,required" frugal:"3,required,string" json:"name"`
	Picture   string `thrift:"picture,4,required" frugal:"4,required,string" json:"picture"`
	Desc      string `thrift:"desc,5,required" frugal:"5,required,string" json:"desc"`
	Cost      int32  `thrift:"cost,6,required" frugal:"6,required,i32" json:"cost"`
	Uid       int64  `thrift:"uid,7,required" frugal:"7,required,i64" json:"uid"`
	Gid       int32  `thrift:"gid,8,required" frugal:"8,required,i32" json:"gid"`
	Start     string `thrift:"start,9,required" frugal:"9,required,string" json:"start"`
	End       string `thrift:"end,10,required" frugal:"10,required,string" json:"end"`
	Count     int64  `thrift:"count,11,required" frugal:"11,required,i64" json:"count"`
}

func NewActivity() *Activity {
	return &Activity{}
}

func (p *Activity) InitDefault() {
	*p = Activity{}
}

func (p *Activity) GetId() (v int32) {
	return p.Id
}

func (p *Activity) GetCreatTime() (v string) {
	return p.CreatTime
}

func (p *Activity) GetName() (v string) {
	return p.Name
}

func (p *Activity) GetPicture() (v string) {
	return p.Picture
}

func (p *Activity) GetDesc() (v string) {
	return p.Desc
}

func (p *Activity) GetCost() (v int32) {
	return p.Cost
}

func (p *Activity) GetUid() (v int64) {
	return p.Uid
}

func (p *Activity) GetGid() (v int32) {
	return p.Gid
}

func (p *Activity) GetStart() (v string) {
	return p.Start
}

func (p *Activity) GetEnd() (v string) {
	return p.End
}

func (p *Activity) GetCount() (v int64) {
	return p.Count
}
func (p *Activity) SetId(val int32) {
	p.Id = val
}
func (p *Activity) SetCreatTime(val string) {
	p.CreatTime = val
}
func (p *Activity) SetName(val string) {
	p.Name = val
}
func (p *Activity) SetPicture(val string) {
	p.Picture = val
}
func (p *Activity) SetDesc(val string) {
	p.Desc = val
}
func (p *Activity) SetCost(val int32) {
	p.Cost = val
}
func (p *Activity) SetUid(val int64) {
	p.Uid = val
}
func (p *Activity) SetGid(val int32) {
	p.Gid = val
}
func (p *Activity) SetStart(val string) {
	p.Start = val
}
func (p *Activity) SetEnd(val string) {
	p.End = val
}
func (p *Activity) SetCount(val int64) {
	p.Count = val
}

var fieldIDToName_Activity = map[int16]string{
	1:  "id",
	2:  "creat_time",
	3:  "name",
	4:  "picture",
	5:  "desc",
	6:  "cost",
	7:  "uid",
	8:  "gid",
	9:  "start",
	10: "end",
	11: "count",
}

func (p *Activity) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetCreatTime bool = false
	var issetName bool = false
	var issetPicture bool = false
	var issetDesc bool = false
	var issetCost bool = false
	var issetUid bool = false
	var issetGid bool = false
	var issetStart bool = false
	var issetEnd bool = false
	var issetCount bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreatTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetPicture = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetDesc = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetCost = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetUid = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetGid = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetStart = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetEnd = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetCount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCreatTime {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetPicture {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetDesc {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetCost {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetUid {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetGid {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetStart {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetEnd {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetCount {
		fieldId = 11
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Activity[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_Activity[fieldId]))
}

func (p *Activity) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *Activity) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreatTime = v
	}
	return nil
}

func (p *Activity) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *Activity) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Picture = v
	}
	return nil
}

func (p *Activity) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Desc = v
	}
	return nil
}

func (p *Activity) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Cost = v
	}
	return nil
}

func (p *Activity) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Uid = v
	}
	return nil
}

func (p *Activity) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Gid = v
	}
	return nil
}

func (p *Activity) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Start = v
	}
	return nil
}

func (p *Activity) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.End = v
	}
	return nil
}

func (p *Activity) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Count = v
	}
	return nil
}

func (p *Activity) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Activity"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Activity) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Activity) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("creat_time", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreatTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Activity) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Activity) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("picture", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Picture); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Activity) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("desc", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Desc); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Activity) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("cost", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Cost); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Activity) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uid", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *Activity) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("gid", thrift.I32, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Gid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *Activity) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Start); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *Activity) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.End); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *Activity) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("count", thrift.I64, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Count); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *Activity) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Activity(%+v)", *p)
}

func (p *Activity) DeepEqual(ano *Activity) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatTime) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Picture) {
		return false
	}
	if !p.Field5DeepEqual(ano.Desc) {
		return false
	}
	if !p.Field6DeepEqual(ano.Cost) {
		return false
	}
	if !p.Field7DeepEqual(ano.Uid) {
		return false
	}
	if !p.Field8DeepEqual(ano.Gid) {
		return false
	}
	if !p.Field9DeepEqual(ano.Start) {
		return false
	}
	if !p.Field10DeepEqual(ano.End) {
		return false
	}
	if !p.Field11DeepEqual(ano.Count) {
		return false
	}
	return true
}

func (p *Activity) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *Activity) Field2DeepEqual(src string) bool {

	if strings.Compare(p.CreatTime, src) != 0 {
		return false
	}
	return true
}
func (p *Activity) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *Activity) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Picture, src) != 0 {
		return false
	}
	return true
}
func (p *Activity) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Desc, src) != 0 {
		return false
	}
	return true
}
func (p *Activity) Field6DeepEqual(src int32) bool {

	if p.Cost != src {
		return false
	}
	return true
}
func (p *Activity) Field7DeepEqual(src int64) bool {

	if p.Uid != src {
		return false
	}
	return true
}
func (p *Activity) Field8DeepEqual(src int32) bool {

	if p.Gid != src {
		return false
	}
	return true
}
func (p *Activity) Field9DeepEqual(src string) bool {

	if strings.Compare(p.Start, src) != 0 {
		return false
	}
	return true
}
func (p *Activity) Field10DeepEqual(src string) bool {

	if strings.Compare(p.End, src) != 0 {
		return false
	}
	return true
}
func (p *Activity) Field11DeepEqual(src int64) bool {

	if p.Count != src {
		return false
	}
	return true
}

type Prize struct {
	Id        int32  `thrift:"id,1,required" frugal:"1,required,i32" json:"id"`
	CreatedAt string `thrift:"created_at,2,required" frugal:"2,required,string" json:"created_at"`
	Name      string `thrift:"name,3,required" frugal:"3,required,string" json:"name"`
	Num       int64  `thrift:"num,4,required" frugal:"4,required,i64" json:"num"`
	Picture   string `thrift:"picture,5,required" frugal:"5,required,string" json:"picture"`
}

func NewPrize() *Prize {
	return &Prize{}
}

func (p *Prize) InitDefault() {
	*p = Prize{}
}

func (p *Prize) GetId() (v int32) {
	return p.Id
}

func (p *Prize) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *Prize) GetName() (v string) {
	return p.Name
}

func (p *Prize) GetNum() (v int64) {
	return p.Num
}

func (p *Prize) GetPicture() (v string) {
	return p.Picture
}
func (p *Prize) SetId(val int32) {
	p.Id = val
}
func (p *Prize) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *Prize) SetName(val string) {
	p.Name = val
}
func (p *Prize) SetNum(val int64) {
	p.Num = val
}
func (p *Prize) SetPicture(val string) {
	p.Picture = val
}

var fieldIDToName_Prize = map[int16]string{
	1: "id",
	2: "created_at",
	3: "name",
	4: "num",
	5: "picture",
}

func (p *Prize) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetCreatedAt bool = false
	var issetName bool = false
	var issetNum bool = false
	var issetPicture bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreatedAt = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetNum = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetPicture = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCreatedAt {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetNum {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetPicture {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Prize[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_Prize[fieldId]))
}

func (p *Prize) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *Prize) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreatedAt = v
	}
	return nil
}

func (p *Prize) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *Prize) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Num = v
	}
	return nil
}

func (p *Prize) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Picture = v
	}
	return nil
}

func (p *Prize) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Prize"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Prize) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Prize) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Prize) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Prize) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("num", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Num); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Prize) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("picture", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Picture); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Prize) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Prize(%+v)", *p)
}

func (p *Prize) DeepEqual(ano *Prize) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Num) {
		return false
	}
	if !p.Field5DeepEqual(ano.Picture) {
		return false
	}
	return true
}

func (p *Prize) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *Prize) Field2DeepEqual(src string) bool {

	if strings.Compare(p.CreatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *Prize) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *Prize) Field4DeepEqual(src int64) bool {

	if p.Num != src {
		return false
	}
	return true
}
func (p *Prize) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Picture, src) != 0 {
		return false
	}
	return true
}

type BaseResponse struct {
	Msg  string `thrift:"msg,1,required" frugal:"1,required,string" json:"msg"`
	Code int32  `thrift:"code,2,required" frugal:"2,required,i32" json:"code"`
}

func NewBaseResponse() *BaseResponse {
	return &BaseResponse{}
}

func (p *BaseResponse) InitDefault() {
	*p = BaseResponse{}
}

func (p *BaseResponse) GetMsg() (v string) {
	return p.Msg
}

func (p *BaseResponse) GetCode() (v int32) {
	return p.Code
}
func (p *BaseResponse) SetMsg(val string) {
	p.Msg = val
}
func (p *BaseResponse) SetCode(val int32) {
	p.Code = val
}

var fieldIDToName_BaseResponse = map[int16]string{
	1: "msg",
	2: "code",
}

func (p *BaseResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetMsg bool = false
	var issetCode bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetMsg = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetCode = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetMsg {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCode {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BaseResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BaseResponse[fieldId]))
}

func (p *BaseResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Msg = v
	}
	return nil
}

func (p *BaseResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *BaseResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BaseResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BaseResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("msg", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Msg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BaseResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BaseResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseResponse(%+v)", *p)
}

func (p *BaseResponse) DeepEqual(ano *BaseResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field2DeepEqual(ano.Code) {
		return false
	}
	return true
}

func (p *BaseResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Msg, src) != 0 {
		return false
	}
	return true
}
func (p *BaseResponse) Field2DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}

type ActivityAddRequest struct {
	Name    string  `thrift:"name,1,required" frugal:"1,required,string" json:"name"`
	Picture *string `thrift:"picture,2,optional" frugal:"2,optional,string" json:"picture,omitempty"`
	Dec     string  `thrift:"dec,3,required" frugal:"3,required,string" json:"dec"`
	Cost    int32   `thrift:"cost,4,required" frugal:"4,required,i32" json:"cost"`
	Uid     *int64  `thrift:"uid,5,optional" frugal:"5,optional,i64" json:"uid,omitempty"`
	Gid     int32   `thrift:"gid,6,required" frugal:"6,required,i32" json:"gid"`
	Start   string  `thrift:"start,7,required" frugal:"7,required,string" json:"start"`
	End     string  `thrift:"end,8,required" frugal:"8,required,string" json:"end"`
}

func NewActivityAddRequest() *ActivityAddRequest {
	return &ActivityAddRequest{}
}

func (p *ActivityAddRequest) InitDefault() {
	*p = ActivityAddRequest{}
}

func (p *ActivityAddRequest) GetName() (v string) {
	return p.Name
}

var ActivityAddRequest_Picture_DEFAULT string

func (p *ActivityAddRequest) GetPicture() (v string) {
	if !p.IsSetPicture() {
		return ActivityAddRequest_Picture_DEFAULT
	}
	return *p.Picture
}

func (p *ActivityAddRequest) GetDec() (v string) {
	return p.Dec
}

func (p *ActivityAddRequest) GetCost() (v int32) {
	return p.Cost
}

var ActivityAddRequest_Uid_DEFAULT int64

func (p *ActivityAddRequest) GetUid() (v int64) {
	if !p.IsSetUid() {
		return ActivityAddRequest_Uid_DEFAULT
	}
	return *p.Uid
}

func (p *ActivityAddRequest) GetGid() (v int32) {
	return p.Gid
}

func (p *ActivityAddRequest) GetStart() (v string) {
	return p.Start
}

func (p *ActivityAddRequest) GetEnd() (v string) {
	return p.End
}
func (p *ActivityAddRequest) SetName(val string) {
	p.Name = val
}
func (p *ActivityAddRequest) SetPicture(val *string) {
	p.Picture = val
}
func (p *ActivityAddRequest) SetDec(val string) {
	p.Dec = val
}
func (p *ActivityAddRequest) SetCost(val int32) {
	p.Cost = val
}
func (p *ActivityAddRequest) SetUid(val *int64) {
	p.Uid = val
}
func (p *ActivityAddRequest) SetGid(val int32) {
	p.Gid = val
}
func (p *ActivityAddRequest) SetStart(val string) {
	p.Start = val
}
func (p *ActivityAddRequest) SetEnd(val string) {
	p.End = val
}

var fieldIDToName_ActivityAddRequest = map[int16]string{
	1: "name",
	2: "picture",
	3: "dec",
	4: "cost",
	5: "uid",
	6: "gid",
	7: "start",
	8: "end",
}

func (p *ActivityAddRequest) IsSetPicture() bool {
	return p.Picture != nil
}

func (p *ActivityAddRequest) IsSetUid() bool {
	return p.Uid != nil
}

func (p *ActivityAddRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetDec bool = false
	var issetCost bool = false
	var issetGid bool = false
	var issetStart bool = false
	var issetEnd bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetDec = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetCost = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetGid = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetStart = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetEnd = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetDec {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetCost {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetGid {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetStart {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetEnd {
		fieldId = 8
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ActivityAddRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ActivityAddRequest[fieldId]))
}

func (p *ActivityAddRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *ActivityAddRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Picture = &v
	}
	return nil
}

func (p *ActivityAddRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Dec = v
	}
	return nil
}

func (p *ActivityAddRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Cost = v
	}
	return nil
}

func (p *ActivityAddRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Uid = &v
	}
	return nil
}

func (p *ActivityAddRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Gid = v
	}
	return nil
}

func (p *ActivityAddRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Start = v
	}
	return nil
}

func (p *ActivityAddRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.End = v
	}
	return nil
}

func (p *ActivityAddRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ActivityAddRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ActivityAddRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ActivityAddRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPicture() {
		if err = oprot.WriteFieldBegin("picture", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Picture); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ActivityAddRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dec", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Dec); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ActivityAddRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("cost", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Cost); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ActivityAddRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetUid() {
		if err = oprot.WriteFieldBegin("uid", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Uid); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ActivityAddRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("gid", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Gid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ActivityAddRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Start); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ActivityAddRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.End); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ActivityAddRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ActivityAddRequest(%+v)", *p)
}

func (p *ActivityAddRequest) DeepEqual(ano *ActivityAddRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Picture) {
		return false
	}
	if !p.Field3DeepEqual(ano.Dec) {
		return false
	}
	if !p.Field4DeepEqual(ano.Cost) {
		return false
	}
	if !p.Field5DeepEqual(ano.Uid) {
		return false
	}
	if !p.Field6DeepEqual(ano.Gid) {
		return false
	}
	if !p.Field7DeepEqual(ano.Start) {
		return false
	}
	if !p.Field8DeepEqual(ano.End) {
		return false
	}
	return true
}

func (p *ActivityAddRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ActivityAddRequest) Field2DeepEqual(src *string) bool {

	if p.Picture == src {
		return true
	} else if p.Picture == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Picture, *src) != 0 {
		return false
	}
	return true
}
func (p *ActivityAddRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Dec, src) != 0 {
		return false
	}
	return true
}
func (p *ActivityAddRequest) Field4DeepEqual(src int32) bool {

	if p.Cost != src {
		return false
	}
	return true
}
func (p *ActivityAddRequest) Field5DeepEqual(src *int64) bool {

	if p.Uid == src {
		return true
	} else if p.Uid == nil || src == nil {
		return false
	}
	if *p.Uid != *src {
		return false
	}
	return true
}
func (p *ActivityAddRequest) Field6DeepEqual(src int32) bool {

	if p.Gid != src {
		return false
	}
	return true
}
func (p *ActivityAddRequest) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Start, src) != 0 {
		return false
	}
	return true
}
func (p *ActivityAddRequest) Field8DeepEqual(src string) bool {

	if strings.Compare(p.End, src) != 0 {
		return false
	}
	return true
}

type ActivityUpdateRequest struct {
	Id      int32  `thrift:"id,1,required" frugal:"1,required,i32" json:"id"`
	Name    string `thrift:"name,2,required" frugal:"2,required,string" json:"name"`
	Picture string `thrift:"picture,3,required" frugal:"3,required,string" json:"picture"`
	Desc    string `thrift:"desc,4,required" frugal:"4,required,string" json:"desc"`
	Cost    int32  `thrift:"cost,5,required" frugal:"5,required,i32" json:"cost"`
	Uid     int64  `thrift:"uid,6,required" frugal:"6,required,i64" json:"uid"`
	Gid     int32  `thrift:"gid,7,required" frugal:"7,required,i32" json:"gid"`
	Start   string `thrift:"start,8,required" frugal:"8,required,string" json:"start"`
	End     string `thrift:"end,9,required" frugal:"9,required,string" json:"end"`
}

func NewActivityUpdateRequest() *ActivityUpdateRequest {
	return &ActivityUpdateRequest{}
}

func (p *ActivityUpdateRequest) InitDefault() {
	*p = ActivityUpdateRequest{}
}

func (p *ActivityUpdateRequest) GetId() (v int32) {
	return p.Id
}

func (p *ActivityUpdateRequest) GetName() (v string) {
	return p.Name
}

func (p *ActivityUpdateRequest) GetPicture() (v string) {
	return p.Picture
}

func (p *ActivityUpdateRequest) GetDesc() (v string) {
	return p.Desc
}

func (p *ActivityUpdateRequest) GetCost() (v int32) {
	return p.Cost
}

func (p *ActivityUpdateRequest) GetUid() (v int64) {
	return p.Uid
}

func (p *ActivityUpdateRequest) GetGid() (v int32) {
	return p.Gid
}

func (p *ActivityUpdateRequest) GetStart() (v string) {
	return p.Start
}

func (p *ActivityUpdateRequest) GetEnd() (v string) {
	return p.End
}
func (p *ActivityUpdateRequest) SetId(val int32) {
	p.Id = val
}
func (p *ActivityUpdateRequest) SetName(val string) {
	p.Name = val
}
func (p *ActivityUpdateRequest) SetPicture(val string) {
	p.Picture = val
}
func (p *ActivityUpdateRequest) SetDesc(val string) {
	p.Desc = val
}
func (p *ActivityUpdateRequest) SetCost(val int32) {
	p.Cost = val
}
func (p *ActivityUpdateRequest) SetUid(val int64) {
	p.Uid = val
}
func (p *ActivityUpdateRequest) SetGid(val int32) {
	p.Gid = val
}
func (p *ActivityUpdateRequest) SetStart(val string) {
	p.Start = val
}
func (p *ActivityUpdateRequest) SetEnd(val string) {
	p.End = val
}

var fieldIDToName_ActivityUpdateRequest = map[int16]string{
	1: "id",
	2: "name",
	3: "picture",
	4: "desc",
	5: "cost",
	6: "uid",
	7: "gid",
	8: "start",
	9: "end",
}

func (p *ActivityUpdateRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetName bool = false
	var issetPicture bool = false
	var issetDesc bool = false
	var issetCost bool = false
	var issetUid bool = false
	var issetGid bool = false
	var issetStart bool = false
	var issetEnd bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPicture = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetDesc = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetCost = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetUid = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetGid = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetStart = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetEnd = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPicture {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetDesc {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetCost {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetUid {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetGid {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetStart {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetEnd {
		fieldId = 9
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ActivityUpdateRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ActivityUpdateRequest[fieldId]))
}

func (p *ActivityUpdateRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *ActivityUpdateRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *ActivityUpdateRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Picture = v
	}
	return nil
}

func (p *ActivityUpdateRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Desc = v
	}
	return nil
}

func (p *ActivityUpdateRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Cost = v
	}
	return nil
}

func (p *ActivityUpdateRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Uid = v
	}
	return nil
}

func (p *ActivityUpdateRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Gid = v
	}
	return nil
}

func (p *ActivityUpdateRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Start = v
	}
	return nil
}

func (p *ActivityUpdateRequest) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.End = v
	}
	return nil
}

func (p *ActivityUpdateRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ActivityUpdateRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ActivityUpdateRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ActivityUpdateRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ActivityUpdateRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("picture", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Picture); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ActivityUpdateRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("desc", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Desc); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ActivityUpdateRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("cost", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Cost); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ActivityUpdateRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uid", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ActivityUpdateRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("gid", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Gid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ActivityUpdateRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Start); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ActivityUpdateRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.End); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ActivityUpdateRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ActivityUpdateRequest(%+v)", *p)
}

func (p *ActivityUpdateRequest) DeepEqual(ano *ActivityUpdateRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Picture) {
		return false
	}
	if !p.Field4DeepEqual(ano.Desc) {
		return false
	}
	if !p.Field5DeepEqual(ano.Cost) {
		return false
	}
	if !p.Field6DeepEqual(ano.Uid) {
		return false
	}
	if !p.Field7DeepEqual(ano.Gid) {
		return false
	}
	if !p.Field8DeepEqual(ano.Start) {
		return false
	}
	if !p.Field9DeepEqual(ano.End) {
		return false
	}
	return true
}

func (p *ActivityUpdateRequest) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ActivityUpdateRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ActivityUpdateRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Picture, src) != 0 {
		return false
	}
	return true
}
func (p *ActivityUpdateRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Desc, src) != 0 {
		return false
	}
	return true
}
func (p *ActivityUpdateRequest) Field5DeepEqual(src int32) bool {

	if p.Cost != src {
		return false
	}
	return true
}
func (p *ActivityUpdateRequest) Field6DeepEqual(src int64) bool {

	if p.Uid != src {
		return false
	}
	return true
}
func (p *ActivityUpdateRequest) Field7DeepEqual(src int32) bool {

	if p.Gid != src {
		return false
	}
	return true
}
func (p *ActivityUpdateRequest) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Start, src) != 0 {
		return false
	}
	return true
}
func (p *ActivityUpdateRequest) Field9DeepEqual(src string) bool {

	if strings.Compare(p.End, src) != 0 {
		return false
	}
	return true
}

type ActivityDelRequest struct {
	Id  int32 `thrift:"id,1,required" frugal:"1,required,i32" json:"id"`
	Uid int64 `thrift:"uid,2,required" frugal:"2,required,i64" json:"uid"`
}

func NewActivityDelRequest() *ActivityDelRequest {
	return &ActivityDelRequest{}
}

func (p *ActivityDelRequest) InitDefault() {
	*p = ActivityDelRequest{}
}

func (p *ActivityDelRequest) GetId() (v int32) {
	return p.Id
}

func (p *ActivityDelRequest) GetUid() (v int64) {
	return p.Uid
}
func (p *ActivityDelRequest) SetId(val int32) {
	p.Id = val
}
func (p *ActivityDelRequest) SetUid(val int64) {
	p.Uid = val
}

var fieldIDToName_ActivityDelRequest = map[int16]string{
	1: "id",
	2: "uid",
}

func (p *ActivityDelRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetUid bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetUid = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetUid {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ActivityDelRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ActivityDelRequest[fieldId]))
}

func (p *ActivityDelRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *ActivityDelRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Uid = v
	}
	return nil
}

func (p *ActivityDelRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ActivityDelRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ActivityDelRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ActivityDelRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ActivityDelRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ActivityDelRequest(%+v)", *p)
}

func (p *ActivityDelRequest) DeepEqual(ano *ActivityDelRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Uid) {
		return false
	}
	return true
}

func (p *ActivityDelRequest) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ActivityDelRequest) Field2DeepEqual(src int64) bool {

	if p.Uid != src {
		return false
	}
	return true
}

type GetActivityByGidRequest struct {
	Gid    int32 `thrift:"gid,1,required" frugal:"1,required,i32" json:"gid"`
	Offset int32 `thrift:"offset,2,required" frugal:"2,required,i32" json:"offset"`
	Limit  int32 `thrift:"limit,3,required" frugal:"3,required,i32" json:"limit"`
}

func NewGetActivityByGidRequest() *GetActivityByGidRequest {
	return &GetActivityByGidRequest{}
}

func (p *GetActivityByGidRequest) InitDefault() {
	*p = GetActivityByGidRequest{}
}

func (p *GetActivityByGidRequest) GetGid() (v int32) {
	return p.Gid
}

func (p *GetActivityByGidRequest) GetOffset() (v int32) {
	return p.Offset
}

func (p *GetActivityByGidRequest) GetLimit() (v int32) {
	return p.Limit
}
func (p *GetActivityByGidRequest) SetGid(val int32) {
	p.Gid = val
}
func (p *GetActivityByGidRequest) SetOffset(val int32) {
	p.Offset = val
}
func (p *GetActivityByGidRequest) SetLimit(val int32) {
	p.Limit = val
}

var fieldIDToName_GetActivityByGidRequest = map[int16]string{
	1: "gid",
	2: "offset",
	3: "limit",
}

func (p *GetActivityByGidRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetGid bool = false
	var issetOffset bool = false
	var issetLimit bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetGid = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetOffset = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetLimit = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetGid {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetOffset {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetLimit {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetActivityByGidRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetActivityByGidRequest[fieldId]))
}

func (p *GetActivityByGidRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Gid = v
	}
	return nil
}

func (p *GetActivityByGidRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Offset = v
	}
	return nil
}

func (p *GetActivityByGidRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Limit = v
	}
	return nil
}

func (p *GetActivityByGidRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetActivityByGidRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetActivityByGidRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("gid", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Gid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetActivityByGidRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("offset", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Offset); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetActivityByGidRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("limit", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Limit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetActivityByGidRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetActivityByGidRequest(%+v)", *p)
}

func (p *GetActivityByGidRequest) DeepEqual(ano *GetActivityByGidRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Gid) {
		return false
	}
	if !p.Field2DeepEqual(ano.Offset) {
		return false
	}
	if !p.Field3DeepEqual(ano.Limit) {
		return false
	}
	return true
}

func (p *GetActivityByGidRequest) Field1DeepEqual(src int32) bool {

	if p.Gid != src {
		return false
	}
	return true
}
func (p *GetActivityByGidRequest) Field2DeepEqual(src int32) bool {

	if p.Offset != src {
		return false
	}
	return true
}
func (p *GetActivityByGidRequest) Field3DeepEqual(src int32) bool {

	if p.Limit != src {
		return false
	}
	return true
}

type GetAllActivityRequest struct {
	Offset int32 `thrift:"offset,1,required" frugal:"1,required,i32" json:"offset"`
	Limit  int32 `thrift:"limit,2,required" frugal:"2,required,i32" json:"limit"`
}

func NewGetAllActivityRequest() *GetAllActivityRequest {
	return &GetAllActivityRequest{}
}

func (p *GetAllActivityRequest) InitDefault() {
	*p = GetAllActivityRequest{}
}

func (p *GetAllActivityRequest) GetOffset() (v int32) {
	return p.Offset
}

func (p *GetAllActivityRequest) GetLimit() (v int32) {
	return p.Limit
}
func (p *GetAllActivityRequest) SetOffset(val int32) {
	p.Offset = val
}
func (p *GetAllActivityRequest) SetLimit(val int32) {
	p.Limit = val
}

var fieldIDToName_GetAllActivityRequest = map[int16]string{
	1: "offset",
	2: "limit",
}

func (p *GetAllActivityRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetOffset bool = false
	var issetLimit bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetOffset = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetLimit = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetOffset {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetLimit {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetAllActivityRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetAllActivityRequest[fieldId]))
}

func (p *GetAllActivityRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Offset = v
	}
	return nil
}

func (p *GetAllActivityRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Limit = v
	}
	return nil
}

func (p *GetAllActivityRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAllActivityRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetAllActivityRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("offset", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Offset); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetAllActivityRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("limit", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Limit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetAllActivityRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAllActivityRequest(%+v)", *p)
}

func (p *GetAllActivityRequest) DeepEqual(ano *GetAllActivityRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Offset) {
		return false
	}
	if !p.Field2DeepEqual(ano.Limit) {
		return false
	}
	return true
}

func (p *GetAllActivityRequest) Field1DeepEqual(src int32) bool {

	if p.Offset != src {
		return false
	}
	return true
}
func (p *GetAllActivityRequest) Field2DeepEqual(src int32) bool {

	if p.Limit != src {
		return false
	}
	return true
}

type ActivitysResponse struct {
	Resp     *BaseResponse `thrift:"resp,1,required" frugal:"1,required,BaseResponse" json:"resp"`
	Total    int64         `thrift:"total,2,required" frugal:"2,required,i64" json:"total"`
	Activity []*Activity   `thrift:"activity,3,required" frugal:"3,required,list<Activity>" json:"activity"`
}

func NewActivitysResponse() *ActivitysResponse {
	return &ActivitysResponse{}
}

func (p *ActivitysResponse) InitDefault() {
	*p = ActivitysResponse{}
}

var ActivitysResponse_Resp_DEFAULT *BaseResponse

func (p *ActivitysResponse) GetResp() (v *BaseResponse) {
	if !p.IsSetResp() {
		return ActivitysResponse_Resp_DEFAULT
	}
	return p.Resp
}

func (p *ActivitysResponse) GetTotal() (v int64) {
	return p.Total
}

func (p *ActivitysResponse) GetActivity() (v []*Activity) {
	return p.Activity
}
func (p *ActivitysResponse) SetResp(val *BaseResponse) {
	p.Resp = val
}
func (p *ActivitysResponse) SetTotal(val int64) {
	p.Total = val
}
func (p *ActivitysResponse) SetActivity(val []*Activity) {
	p.Activity = val
}

var fieldIDToName_ActivitysResponse = map[int16]string{
	1: "resp",
	2: "total",
	3: "activity",
}

func (p *ActivitysResponse) IsSetResp() bool {
	return p.Resp != nil
}

func (p *ActivitysResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetResp bool = false
	var issetTotal bool = false
	var issetActivity bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetResp = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetActivity = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetResp {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTotal {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetActivity {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ActivitysResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ActivitysResponse[fieldId]))
}

func (p *ActivitysResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Resp = NewBaseResponse()
	if err := p.Resp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ActivitysResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Total = v
	}
	return nil
}

func (p *ActivitysResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Activity = make([]*Activity, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewActivity()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Activity = append(p.Activity, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ActivitysResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ActivitysResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ActivitysResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Resp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ActivitysResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("total", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ActivitysResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("activity", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Activity)); err != nil {
		return err
	}
	for _, v := range p.Activity {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ActivitysResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ActivitysResponse(%+v)", *p)
}

func (p *ActivitysResponse) DeepEqual(ano *ActivitysResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Resp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Total) {
		return false
	}
	if !p.Field3DeepEqual(ano.Activity) {
		return false
	}
	return true
}

func (p *ActivitysResponse) Field1DeepEqual(src *BaseResponse) bool {

	if !p.Resp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ActivitysResponse) Field2DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}
func (p *ActivitysResponse) Field3DeepEqual(src []*Activity) bool {

	if len(p.Activity) != len(src) {
		return false
	}
	for i, v := range p.Activity {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type GetActivityByIdRequest struct {
	Id int32 `thrift:"id,1,required" frugal:"1,required,i32" json:"id"`
}

func NewGetActivityByIdRequest() *GetActivityByIdRequest {
	return &GetActivityByIdRequest{}
}

func (p *GetActivityByIdRequest) InitDefault() {
	*p = GetActivityByIdRequest{}
}

func (p *GetActivityByIdRequest) GetId() (v int32) {
	return p.Id
}
func (p *GetActivityByIdRequest) SetId(val int32) {
	p.Id = val
}

var fieldIDToName_GetActivityByIdRequest = map[int16]string{
	1: "id",
}

func (p *GetActivityByIdRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetActivityByIdRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetActivityByIdRequest[fieldId]))
}

func (p *GetActivityByIdRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *GetActivityByIdRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetActivityByIdRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetActivityByIdRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetActivityByIdRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetActivityByIdRequest(%+v)", *p)
}

func (p *GetActivityByIdRequest) DeepEqual(ano *GetActivityByIdRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *GetActivityByIdRequest) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}

type ActivityResponse struct {
	Resp     *BaseResponse `thrift:"resp,1,required" frugal:"1,required,BaseResponse" json:"resp"`
	Activity *Activity     `thrift:"activity,2,required" frugal:"2,required,Activity" json:"activity"`
}

func NewActivityResponse() *ActivityResponse {
	return &ActivityResponse{}
}

func (p *ActivityResponse) InitDefault() {
	*p = ActivityResponse{}
}

var ActivityResponse_Resp_DEFAULT *BaseResponse

func (p *ActivityResponse) GetResp() (v *BaseResponse) {
	if !p.IsSetResp() {
		return ActivityResponse_Resp_DEFAULT
	}
	return p.Resp
}

var ActivityResponse_Activity_DEFAULT *Activity

func (p *ActivityResponse) GetActivity() (v *Activity) {
	if !p.IsSetActivity() {
		return ActivityResponse_Activity_DEFAULT
	}
	return p.Activity
}
func (p *ActivityResponse) SetResp(val *BaseResponse) {
	p.Resp = val
}
func (p *ActivityResponse) SetActivity(val *Activity) {
	p.Activity = val
}

var fieldIDToName_ActivityResponse = map[int16]string{
	1: "resp",
	2: "activity",
}

func (p *ActivityResponse) IsSetResp() bool {
	return p.Resp != nil
}

func (p *ActivityResponse) IsSetActivity() bool {
	return p.Activity != nil
}

func (p *ActivityResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetResp bool = false
	var issetActivity bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetResp = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetActivity = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetResp {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetActivity {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ActivityResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ActivityResponse[fieldId]))
}

func (p *ActivityResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Resp = NewBaseResponse()
	if err := p.Resp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ActivityResponse) ReadField2(iprot thrift.TProtocol) error {
	p.Activity = NewActivity()
	if err := p.Activity.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ActivityResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ActivityResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ActivityResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Resp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ActivityResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("activity", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Activity.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ActivityResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ActivityResponse(%+v)", *p)
}

func (p *ActivityResponse) DeepEqual(ano *ActivityResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Resp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Activity) {
		return false
	}
	return true
}

func (p *ActivityResponse) Field1DeepEqual(src *BaseResponse) bool {

	if !p.Resp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ActivityResponse) Field2DeepEqual(src *Activity) bool {

	if !p.Activity.DeepEqual(src) {
		return false
	}
	return true
}

type PrizeAddRequest struct {
	Name    string `thrift:"name,1,required" frugal:"1,required,string" json:"name"`
	Num     int64  `thrift:"num,2,required" frugal:"2,required,i64" json:"num"`
	Picture string `thrift:"picture,3,required" frugal:"3,required,string" json:"picture"`
	Aid     int32  `thrift:"aid,4,required" frugal:"4,required,i32" json:"aid"`
}

func NewPrizeAddRequest() *PrizeAddRequest {
	return &PrizeAddRequest{}
}

func (p *PrizeAddRequest) InitDefault() {
	*p = PrizeAddRequest{}
}

func (p *PrizeAddRequest) GetName() (v string) {
	return p.Name
}

func (p *PrizeAddRequest) GetNum() (v int64) {
	return p.Num
}

func (p *PrizeAddRequest) GetPicture() (v string) {
	return p.Picture
}

func (p *PrizeAddRequest) GetAid() (v int32) {
	return p.Aid
}
func (p *PrizeAddRequest) SetName(val string) {
	p.Name = val
}
func (p *PrizeAddRequest) SetNum(val int64) {
	p.Num = val
}
func (p *PrizeAddRequest) SetPicture(val string) {
	p.Picture = val
}
func (p *PrizeAddRequest) SetAid(val int32) {
	p.Aid = val
}

var fieldIDToName_PrizeAddRequest = map[int16]string{
	1: "name",
	2: "num",
	3: "picture",
	4: "aid",
}

func (p *PrizeAddRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetNum bool = false
	var issetPicture bool = false
	var issetAid bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNum = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPicture = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetAid = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNum {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPicture {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetAid {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PrizeAddRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_PrizeAddRequest[fieldId]))
}

func (p *PrizeAddRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *PrizeAddRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Num = v
	}
	return nil
}

func (p *PrizeAddRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Picture = v
	}
	return nil
}

func (p *PrizeAddRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Aid = v
	}
	return nil
}

func (p *PrizeAddRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PrizeAddRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PrizeAddRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PrizeAddRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("num", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Num); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PrizeAddRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("picture", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Picture); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PrizeAddRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("aid", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Aid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *PrizeAddRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrizeAddRequest(%+v)", *p)
}

func (p *PrizeAddRequest) DeepEqual(ano *PrizeAddRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Num) {
		return false
	}
	if !p.Field3DeepEqual(ano.Picture) {
		return false
	}
	if !p.Field4DeepEqual(ano.Aid) {
		return false
	}
	return true
}

func (p *PrizeAddRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *PrizeAddRequest) Field2DeepEqual(src int64) bool {

	if p.Num != src {
		return false
	}
	return true
}
func (p *PrizeAddRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Picture, src) != 0 {
		return false
	}
	return true
}
func (p *PrizeAddRequest) Field4DeepEqual(src int32) bool {

	if p.Aid != src {
		return false
	}
	return true
}

type PrizeDelRequest struct {
	Id  int32 `thrift:"id,1,required" frugal:"1,required,i32" json:"id"`
	Uid int64 `thrift:"uid,2,required" frugal:"2,required,i64" json:"uid"`
}

func NewPrizeDelRequest() *PrizeDelRequest {
	return &PrizeDelRequest{}
}

func (p *PrizeDelRequest) InitDefault() {
	*p = PrizeDelRequest{}
}

func (p *PrizeDelRequest) GetId() (v int32) {
	return p.Id
}

func (p *PrizeDelRequest) GetUid() (v int64) {
	return p.Uid
}
func (p *PrizeDelRequest) SetId(val int32) {
	p.Id = val
}
func (p *PrizeDelRequest) SetUid(val int64) {
	p.Uid = val
}

var fieldIDToName_PrizeDelRequest = map[int16]string{
	1: "id",
	2: "uid",
}

func (p *PrizeDelRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetUid bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetUid = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetUid {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PrizeDelRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_PrizeDelRequest[fieldId]))
}

func (p *PrizeDelRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *PrizeDelRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Uid = v
	}
	return nil
}

func (p *PrizeDelRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PrizeDelRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PrizeDelRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PrizeDelRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PrizeDelRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrizeDelRequest(%+v)", *p)
}

func (p *PrizeDelRequest) DeepEqual(ano *PrizeDelRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Uid) {
		return false
	}
	return true
}

func (p *PrizeDelRequest) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *PrizeDelRequest) Field2DeepEqual(src int64) bool {

	if p.Uid != src {
		return false
	}
	return true
}

type PrizeUpdateRequest struct {
	Id      int32  `thrift:"id,1,required" frugal:"1,required,i32" json:"id"`
	Name    string `thrift:"name,2,required" frugal:"2,required,string" json:"name"`
	Num     int64  `thrift:"num,3,required" frugal:"3,required,i64" json:"num"`
	Picture string `thrift:"picture,4,required" frugal:"4,required,string" json:"picture"`
	Aid     int32  `thrift:"aid,5,required" frugal:"5,required,i32" json:"aid"`
	Uid     int64  `thrift:"uid,6,required" frugal:"6,required,i64" json:"uid"`
}

func NewPrizeUpdateRequest() *PrizeUpdateRequest {
	return &PrizeUpdateRequest{}
}

func (p *PrizeUpdateRequest) InitDefault() {
	*p = PrizeUpdateRequest{}
}

func (p *PrizeUpdateRequest) GetId() (v int32) {
	return p.Id
}

func (p *PrizeUpdateRequest) GetName() (v string) {
	return p.Name
}

func (p *PrizeUpdateRequest) GetNum() (v int64) {
	return p.Num
}

func (p *PrizeUpdateRequest) GetPicture() (v string) {
	return p.Picture
}

func (p *PrizeUpdateRequest) GetAid() (v int32) {
	return p.Aid
}

func (p *PrizeUpdateRequest) GetUid() (v int64) {
	return p.Uid
}
func (p *PrizeUpdateRequest) SetId(val int32) {
	p.Id = val
}
func (p *PrizeUpdateRequest) SetName(val string) {
	p.Name = val
}
func (p *PrizeUpdateRequest) SetNum(val int64) {
	p.Num = val
}
func (p *PrizeUpdateRequest) SetPicture(val string) {
	p.Picture = val
}
func (p *PrizeUpdateRequest) SetAid(val int32) {
	p.Aid = val
}
func (p *PrizeUpdateRequest) SetUid(val int64) {
	p.Uid = val
}

var fieldIDToName_PrizeUpdateRequest = map[int16]string{
	1: "id",
	2: "name",
	3: "num",
	4: "picture",
	5: "aid",
	6: "uid",
}

func (p *PrizeUpdateRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetName bool = false
	var issetNum bool = false
	var issetPicture bool = false
	var issetAid bool = false
	var issetUid bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetNum = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetPicture = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetAid = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetUid = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetNum {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetPicture {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetAid {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetUid {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PrizeUpdateRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_PrizeUpdateRequest[fieldId]))
}

func (p *PrizeUpdateRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *PrizeUpdateRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *PrizeUpdateRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Num = v
	}
	return nil
}

func (p *PrizeUpdateRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Picture = v
	}
	return nil
}

func (p *PrizeUpdateRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Aid = v
	}
	return nil
}

func (p *PrizeUpdateRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Uid = v
	}
	return nil
}

func (p *PrizeUpdateRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PrizeUpdateRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PrizeUpdateRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PrizeUpdateRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PrizeUpdateRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("num", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Num); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PrizeUpdateRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("picture", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Picture); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *PrizeUpdateRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("aid", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Aid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *PrizeUpdateRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uid", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *PrizeUpdateRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrizeUpdateRequest(%+v)", *p)
}

func (p *PrizeUpdateRequest) DeepEqual(ano *PrizeUpdateRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Num) {
		return false
	}
	if !p.Field4DeepEqual(ano.Picture) {
		return false
	}
	if !p.Field5DeepEqual(ano.Aid) {
		return false
	}
	if !p.Field6DeepEqual(ano.Uid) {
		return false
	}
	return true
}

func (p *PrizeUpdateRequest) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *PrizeUpdateRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *PrizeUpdateRequest) Field3DeepEqual(src int64) bool {

	if p.Num != src {
		return false
	}
	return true
}
func (p *PrizeUpdateRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Picture, src) != 0 {
		return false
	}
	return true
}
func (p *PrizeUpdateRequest) Field5DeepEqual(src int32) bool {

	if p.Aid != src {
		return false
	}
	return true
}
func (p *PrizeUpdateRequest) Field6DeepEqual(src int64) bool {

	if p.Uid != src {
		return false
	}
	return true
}

type GetPrizeByAidRequest struct {
	Aid int32 `thrift:"aid,1,required" frugal:"1,required,i32" json:"aid"`
}

func NewGetPrizeByAidRequest() *GetPrizeByAidRequest {
	return &GetPrizeByAidRequest{}
}

func (p *GetPrizeByAidRequest) InitDefault() {
	*p = GetPrizeByAidRequest{}
}

func (p *GetPrizeByAidRequest) GetAid() (v int32) {
	return p.Aid
}
func (p *GetPrizeByAidRequest) SetAid(val int32) {
	p.Aid = val
}

var fieldIDToName_GetPrizeByAidRequest = map[int16]string{
	1: "aid",
}

func (p *GetPrizeByAidRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetAid bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetAid = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetAid {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetPrizeByAidRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetPrizeByAidRequest[fieldId]))
}

func (p *GetPrizeByAidRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Aid = v
	}
	return nil
}

func (p *GetPrizeByAidRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPrizeByAidRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetPrizeByAidRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("aid", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Aid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetPrizeByAidRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPrizeByAidRequest(%+v)", *p)
}

func (p *GetPrizeByAidRequest) DeepEqual(ano *GetPrizeByAidRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Aid) {
		return false
	}
	return true
}

func (p *GetPrizeByAidRequest) Field1DeepEqual(src int32) bool {

	if p.Aid != src {
		return false
	}
	return true
}

type GetPrizeByIdRequest struct {
	Id int32 `thrift:"id,1,required" frugal:"1,required,i32" json:"id"`
}

func NewGetPrizeByIdRequest() *GetPrizeByIdRequest {
	return &GetPrizeByIdRequest{}
}

func (p *GetPrizeByIdRequest) InitDefault() {
	*p = GetPrizeByIdRequest{}
}

func (p *GetPrizeByIdRequest) GetId() (v int32) {
	return p.Id
}
func (p *GetPrizeByIdRequest) SetId(val int32) {
	p.Id = val
}

var fieldIDToName_GetPrizeByIdRequest = map[int16]string{
	1: "id",
}

func (p *GetPrizeByIdRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetPrizeByIdRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetPrizeByIdRequest[fieldId]))
}

func (p *GetPrizeByIdRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *GetPrizeByIdRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPrizeByIdRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetPrizeByIdRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetPrizeByIdRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPrizeByIdRequest(%+v)", *p)
}

func (p *GetPrizeByIdRequest) DeepEqual(ano *GetPrizeByIdRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *GetPrizeByIdRequest) Field1DeepEqual(src int32) bool {

	if p.Id != src {
		return false
	}
	return true
}

type PrizeResponse struct {
	Resp  *BaseResponse `thrift:"resp,1,required" frugal:"1,required,BaseResponse" json:"resp"`
	Prize *Prize        `thrift:"prize,2,required" frugal:"2,required,Prize" json:"prize"`
}

func NewPrizeResponse() *PrizeResponse {
	return &PrizeResponse{}
}

func (p *PrizeResponse) InitDefault() {
	*p = PrizeResponse{}
}

var PrizeResponse_Resp_DEFAULT *BaseResponse

func (p *PrizeResponse) GetResp() (v *BaseResponse) {
	if !p.IsSetResp() {
		return PrizeResponse_Resp_DEFAULT
	}
	return p.Resp
}

var PrizeResponse_Prize_DEFAULT *Prize

func (p *PrizeResponse) GetPrize() (v *Prize) {
	if !p.IsSetPrize() {
		return PrizeResponse_Prize_DEFAULT
	}
	return p.Prize
}
func (p *PrizeResponse) SetResp(val *BaseResponse) {
	p.Resp = val
}
func (p *PrizeResponse) SetPrize(val *Prize) {
	p.Prize = val
}

var fieldIDToName_PrizeResponse = map[int16]string{
	1: "resp",
	2: "prize",
}

func (p *PrizeResponse) IsSetResp() bool {
	return p.Resp != nil
}

func (p *PrizeResponse) IsSetPrize() bool {
	return p.Prize != nil
}

func (p *PrizeResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetResp bool = false
	var issetPrize bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetResp = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPrize = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetResp {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPrize {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PrizeResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_PrizeResponse[fieldId]))
}

func (p *PrizeResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Resp = NewBaseResponse()
	if err := p.Resp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PrizeResponse) ReadField2(iprot thrift.TProtocol) error {
	p.Prize = NewPrize()
	if err := p.Prize.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PrizeResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PrizeResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PrizeResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Resp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PrizeResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("prize", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Prize.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PrizeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrizeResponse(%+v)", *p)
}

func (p *PrizeResponse) DeepEqual(ano *PrizeResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Resp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Prize) {
		return false
	}
	return true
}

func (p *PrizeResponse) Field1DeepEqual(src *BaseResponse) bool {

	if !p.Resp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *PrizeResponse) Field2DeepEqual(src *Prize) bool {

	if !p.Prize.DeepEqual(src) {
		return false
	}
	return true
}

type PrizesResponse struct {
	Resp   *BaseResponse `thrift:"resp,1,required" frugal:"1,required,BaseResponse" json:"resp"`
	Prizes []*Prize      `thrift:"prizes,2,required" frugal:"2,required,list<Prize>" json:"prizes"`
}

func NewPrizesResponse() *PrizesResponse {
	return &PrizesResponse{}
}

func (p *PrizesResponse) InitDefault() {
	*p = PrizesResponse{}
}

var PrizesResponse_Resp_DEFAULT *BaseResponse

func (p *PrizesResponse) GetResp() (v *BaseResponse) {
	if !p.IsSetResp() {
		return PrizesResponse_Resp_DEFAULT
	}
	return p.Resp
}

func (p *PrizesResponse) GetPrizes() (v []*Prize) {
	return p.Prizes
}
func (p *PrizesResponse) SetResp(val *BaseResponse) {
	p.Resp = val
}
func (p *PrizesResponse) SetPrizes(val []*Prize) {
	p.Prizes = val
}

var fieldIDToName_PrizesResponse = map[int16]string{
	1: "resp",
	2: "prizes",
}

func (p *PrizesResponse) IsSetResp() bool {
	return p.Resp != nil
}

func (p *PrizesResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetResp bool = false
	var issetPrizes bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetResp = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPrizes = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetResp {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPrizes {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PrizesResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_PrizesResponse[fieldId]))
}

func (p *PrizesResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Resp = NewBaseResponse()
	if err := p.Resp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PrizesResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Prizes = make([]*Prize, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewPrize()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Prizes = append(p.Prizes, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *PrizesResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PrizesResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PrizesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Resp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PrizesResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("prizes", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Prizes)); err != nil {
		return err
	}
	for _, v := range p.Prizes {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PrizesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrizesResponse(%+v)", *p)
}

func (p *PrizesResponse) DeepEqual(ano *PrizesResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Resp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Prizes) {
		return false
	}
	return true
}

func (p *PrizesResponse) Field1DeepEqual(src *BaseResponse) bool {

	if !p.Resp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *PrizesResponse) Field2DeepEqual(src []*Prize) bool {

	if len(p.Prizes) != len(src) {
		return false
	}
	for i, v := range p.Prizes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ChooseRequest struct {
	Uid *int64 `thrift:"uid,1,optional" frugal:"1,optional,i64" json:"uid,omitempty"`
	Aid int32  `thrift:"aid,2,required" frugal:"2,required,i32" json:"aid"`
}

func NewChooseRequest() *ChooseRequest {
	return &ChooseRequest{}
}

func (p *ChooseRequest) InitDefault() {
	*p = ChooseRequest{}
}

var ChooseRequest_Uid_DEFAULT int64

func (p *ChooseRequest) GetUid() (v int64) {
	if !p.IsSetUid() {
		return ChooseRequest_Uid_DEFAULT
	}
	return *p.Uid
}

func (p *ChooseRequest) GetAid() (v int32) {
	return p.Aid
}
func (p *ChooseRequest) SetUid(val *int64) {
	p.Uid = val
}
func (p *ChooseRequest) SetAid(val int32) {
	p.Aid = val
}

var fieldIDToName_ChooseRequest = map[int16]string{
	1: "uid",
	2: "aid",
}

func (p *ChooseRequest) IsSetUid() bool {
	return p.Uid != nil
}

func (p *ChooseRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetAid bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetAid = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetAid {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChooseRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ChooseRequest[fieldId]))
}

func (p *ChooseRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Uid = &v
	}
	return nil
}

func (p *ChooseRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Aid = v
	}
	return nil
}

func (p *ChooseRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChooseRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChooseRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUid() {
		if err = oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Uid); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChooseRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("aid", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Aid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ChooseRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChooseRequest(%+v)", *p)
}

func (p *ChooseRequest) DeepEqual(ano *ChooseRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Uid) {
		return false
	}
	if !p.Field2DeepEqual(ano.Aid) {
		return false
	}
	return true
}

func (p *ChooseRequest) Field1DeepEqual(src *int64) bool {

	if p.Uid == src {
		return true
	} else if p.Uid == nil || src == nil {
		return false
	}
	if *p.Uid != *src {
		return false
	}
	return true
}
func (p *ChooseRequest) Field2DeepEqual(src int32) bool {

	if p.Aid != src {
		return false
	}
	return true
}

type ChooseResponse struct {
	Resp *BaseResponse `thrift:"resp,1,required" frugal:"1,required,BaseResponse" json:"resp"`
	Name string        `thrift:"name,2,required" frugal:"2,required,string" json:"name"`
}

func NewChooseResponse() *ChooseResponse {
	return &ChooseResponse{}
}

func (p *ChooseResponse) InitDefault() {
	*p = ChooseResponse{}
}

var ChooseResponse_Resp_DEFAULT *BaseResponse

func (p *ChooseResponse) GetResp() (v *BaseResponse) {
	if !p.IsSetResp() {
		return ChooseResponse_Resp_DEFAULT
	}
	return p.Resp
}

func (p *ChooseResponse) GetName() (v string) {
	return p.Name
}
func (p *ChooseResponse) SetResp(val *BaseResponse) {
	p.Resp = val
}
func (p *ChooseResponse) SetName(val string) {
	p.Name = val
}

var fieldIDToName_ChooseResponse = map[int16]string{
	1: "resp",
	2: "name",
}

func (p *ChooseResponse) IsSetResp() bool {
	return p.Resp != nil
}

func (p *ChooseResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetResp bool = false
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetResp = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetResp {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChooseResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ChooseResponse[fieldId]))
}

func (p *ChooseResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Resp = NewBaseResponse()
	if err := p.Resp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ChooseResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *ChooseResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChooseResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChooseResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Resp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChooseResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ChooseResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChooseResponse(%+v)", *p)
}

func (p *ChooseResponse) DeepEqual(ano *ChooseResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Resp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	return true
}

func (p *ChooseResponse) Field1DeepEqual(src *BaseResponse) bool {

	if !p.Resp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ChooseResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}

type GetUserOrderRequest struct {
	Uid    *int64 `thrift:"uid,1,optional" frugal:"1,optional,i64" json:"uid,omitempty"`
	Offset int32  `thrift:"offset,2,required" frugal:"2,required,i32" json:"offset"`
	Limit  int32  `thrift:"limit,3,required" frugal:"3,required,i32" json:"limit"`
}

func NewGetUserOrderRequest() *GetUserOrderRequest {
	return &GetUserOrderRequest{}
}

func (p *GetUserOrderRequest) InitDefault() {
	*p = GetUserOrderRequest{}
}

var GetUserOrderRequest_Uid_DEFAULT int64

func (p *GetUserOrderRequest) GetUid() (v int64) {
	if !p.IsSetUid() {
		return GetUserOrderRequest_Uid_DEFAULT
	}
	return *p.Uid
}

func (p *GetUserOrderRequest) GetOffset() (v int32) {
	return p.Offset
}

func (p *GetUserOrderRequest) GetLimit() (v int32) {
	return p.Limit
}
func (p *GetUserOrderRequest) SetUid(val *int64) {
	p.Uid = val
}
func (p *GetUserOrderRequest) SetOffset(val int32) {
	p.Offset = val
}
func (p *GetUserOrderRequest) SetLimit(val int32) {
	p.Limit = val
}

var fieldIDToName_GetUserOrderRequest = map[int16]string{
	1: "uid",
	2: "offset",
	3: "limit",
}

func (p *GetUserOrderRequest) IsSetUid() bool {
	return p.Uid != nil
}

func (p *GetUserOrderRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetOffset bool = false
	var issetLimit bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetOffset = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetLimit = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetOffset {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetLimit {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetUserOrderRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetUserOrderRequest[fieldId]))
}

func (p *GetUserOrderRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Uid = &v
	}
	return nil
}

func (p *GetUserOrderRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Offset = v
	}
	return nil
}

func (p *GetUserOrderRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Limit = v
	}
	return nil
}

func (p *GetUserOrderRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserOrderRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetUserOrderRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUid() {
		if err = oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Uid); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetUserOrderRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("offset", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Offset); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetUserOrderRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("limit", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Limit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetUserOrderRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserOrderRequest(%+v)", *p)
}

func (p *GetUserOrderRequest) DeepEqual(ano *GetUserOrderRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Uid) {
		return false
	}
	if !p.Field2DeepEqual(ano.Offset) {
		return false
	}
	if !p.Field3DeepEqual(ano.Limit) {
		return false
	}
	return true
}

func (p *GetUserOrderRequest) Field1DeepEqual(src *int64) bool {

	if p.Uid == src {
		return true
	} else if p.Uid == nil || src == nil {
		return false
	}
	if *p.Uid != *src {
		return false
	}
	return true
}
func (p *GetUserOrderRequest) Field2DeepEqual(src int32) bool {

	if p.Offset != src {
		return false
	}
	return true
}
func (p *GetUserOrderRequest) Field3DeepEqual(src int32) bool {

	if p.Limit != src {
		return false
	}
	return true
}

type GetAllOrderRequest struct {
	Offset int32 `thrift:"offset,1,required" frugal:"1,required,i32" json:"offset"`
	Limit  int32 `thrift:"limit,2,required" frugal:"2,required,i32" json:"limit"`
}

func NewGetAllOrderRequest() *GetAllOrderRequest {
	return &GetAllOrderRequest{}
}

func (p *GetAllOrderRequest) InitDefault() {
	*p = GetAllOrderRequest{}
}

func (p *GetAllOrderRequest) GetOffset() (v int32) {
	return p.Offset
}

func (p *GetAllOrderRequest) GetLimit() (v int32) {
	return p.Limit
}
func (p *GetAllOrderRequest) SetOffset(val int32) {
	p.Offset = val
}
func (p *GetAllOrderRequest) SetLimit(val int32) {
	p.Limit = val
}

var fieldIDToName_GetAllOrderRequest = map[int16]string{
	1: "offset",
	2: "limit",
}

func (p *GetAllOrderRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetOffset bool = false
	var issetLimit bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetOffset = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetLimit = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetOffset {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetLimit {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetAllOrderRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetAllOrderRequest[fieldId]))
}

func (p *GetAllOrderRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Offset = v
	}
	return nil
}

func (p *GetAllOrderRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Limit = v
	}
	return nil
}

func (p *GetAllOrderRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAllOrderRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetAllOrderRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("offset", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Offset); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetAllOrderRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("limit", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Limit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetAllOrderRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAllOrderRequest(%+v)", *p)
}

func (p *GetAllOrderRequest) DeepEqual(ano *GetAllOrderRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Offset) {
		return false
	}
	if !p.Field2DeepEqual(ano.Limit) {
		return false
	}
	return true
}

func (p *GetAllOrderRequest) Field1DeepEqual(src int32) bool {

	if p.Offset != src {
		return false
	}
	return true
}
func (p *GetAllOrderRequest) Field2DeepEqual(src int32) bool {

	if p.Limit != src {
		return false
	}
	return true
}

type Order struct {
	Id         int64  `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	CreateTime string `thrift:"create_time,2,required" frugal:"2,required,string" json:"create_time"`
	Uid        int64  `thrift:"uid,3,required" frugal:"3,required,i64" json:"uid"`
	Pid        int32  `thrift:"pid,4,required" frugal:"4,required,i32" json:"pid"`
}

func NewOrder() *Order {
	return &Order{}
}

func (p *Order) InitDefault() {
	*p = Order{}
}

func (p *Order) GetId() (v int64) {
	return p.Id
}

func (p *Order) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *Order) GetUid() (v int64) {
	return p.Uid
}

func (p *Order) GetPid() (v int32) {
	return p.Pid
}
func (p *Order) SetId(val int64) {
	p.Id = val
}
func (p *Order) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *Order) SetUid(val int64) {
	p.Uid = val
}
func (p *Order) SetPid(val int32) {
	p.Pid = val
}

var fieldIDToName_Order = map[int16]string{
	1: "id",
	2: "create_time",
	3: "uid",
	4: "pid",
}

func (p *Order) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetCreateTime bool = false
	var issetUid bool = false
	var issetPid bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetUid = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetPid = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCreateTime {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetUid {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetPid {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Order[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_Order[fieldId]))
}

func (p *Order) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *Order) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *Order) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Uid = v
	}
	return nil
}

func (p *Order) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Pid = v
	}
	return nil
}

func (p *Order) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Order"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Order) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Order) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("create_time", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Order) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uid", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Order) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pid", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Pid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Order) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Order(%+v)", *p)
}

func (p *Order) DeepEqual(ano *Order) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field3DeepEqual(ano.Uid) {
		return false
	}
	if !p.Field4DeepEqual(ano.Pid) {
		return false
	}
	return true
}

func (p *Order) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *Order) Field2DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}
func (p *Order) Field3DeepEqual(src int64) bool {

	if p.Uid != src {
		return false
	}
	return true
}
func (p *Order) Field4DeepEqual(src int32) bool {

	if p.Pid != src {
		return false
	}
	return true
}

type OrdersResponse struct {
	Resp  *BaseResponse `thrift:"resp,1,required" frugal:"1,required,BaseResponse" json:"resp"`
	Total int64         `thrift:"total,2,required" frugal:"2,required,i64" json:"total"`
	Order []*Order      `thrift:"order,3,required" frugal:"3,required,list<Order>" json:"order"`
}

func NewOrdersResponse() *OrdersResponse {
	return &OrdersResponse{}
}

func (p *OrdersResponse) InitDefault() {
	*p = OrdersResponse{}
}

var OrdersResponse_Resp_DEFAULT *BaseResponse

func (p *OrdersResponse) GetResp() (v *BaseResponse) {
	if !p.IsSetResp() {
		return OrdersResponse_Resp_DEFAULT
	}
	return p.Resp
}

func (p *OrdersResponse) GetTotal() (v int64) {
	return p.Total
}

func (p *OrdersResponse) GetOrder() (v []*Order) {
	return p.Order
}
func (p *OrdersResponse) SetResp(val *BaseResponse) {
	p.Resp = val
}
func (p *OrdersResponse) SetTotal(val int64) {
	p.Total = val
}
func (p *OrdersResponse) SetOrder(val []*Order) {
	p.Order = val
}

var fieldIDToName_OrdersResponse = map[int16]string{
	1: "resp",
	2: "total",
	3: "order",
}

func (p *OrdersResponse) IsSetResp() bool {
	return p.Resp != nil
}

func (p *OrdersResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetResp bool = false
	var issetTotal bool = false
	var issetOrder bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetResp = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetOrder = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetResp {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTotal {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetOrder {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OrdersResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_OrdersResponse[fieldId]))
}

func (p *OrdersResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Resp = NewBaseResponse()
	if err := p.Resp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *OrdersResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Total = v
	}
	return nil
}

func (p *OrdersResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Order = make([]*Order, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewOrder()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Order = append(p.Order, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *OrdersResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("OrdersResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OrdersResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Resp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *OrdersResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("total", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *OrdersResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("order", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Order)); err != nil {
		return err
	}
	for _, v := range p.Order {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *OrdersResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrdersResponse(%+v)", *p)
}

func (p *OrdersResponse) DeepEqual(ano *OrdersResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Resp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Total) {
		return false
	}
	if !p.Field3DeepEqual(ano.Order) {
		return false
	}
	return true
}

func (p *OrdersResponse) Field1DeepEqual(src *BaseResponse) bool {

	if !p.Resp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *OrdersResponse) Field2DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}
func (p *OrdersResponse) Field3DeepEqual(src []*Order) bool {

	if len(p.Order) != len(src) {
		return false
	}
	for i, v := range p.Order {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type LotteryService interface {
	ActivityAdd(ctx context.Context, req *ActivityAddRequest) (r *BaseResponse, err error)

	ActivityDel(ctx context.Context, req *ActivityDelRequest) (r *BaseResponse, err error)

	ActivityUpdate(ctx context.Context, req *ActivityUpdateRequest) (r *BaseResponse, err error)

	GetActivityByGid(ctx context.Context, req *GetActivityByGidRequest) (r *ActivitysResponse, err error)

	GetAllActivity(ctx context.Context, req *GetAllActivityRequest) (r *ActivitysResponse, err error)

	GetActivityById(ctx context.Context, req *GetActivityByIdRequest) (r *ActivityResponse, err error)

	PrizeAdd(ctx context.Context, req *PrizeAddRequest) (r *BaseResponse, err error)

	PrizeDel(ctx context.Context, req *PrizeDelRequest) (r *BaseResponse, err error)

	PrizeUpdate(ctx context.Context, req *PrizeUpdateRequest) (r *BaseResponse, err error)

	GetPrizeByAid(ctx context.Context, req *GetPrizeByAidRequest) (r *PrizesResponse, err error)

	GetPrizeById(ctx context.Context, req *GetPrizeByIdRequest) (r *PrizeResponse, err error)

	Choose(ctx context.Context) (r *ChooseResponse, err error)

	GetUserOrder(ctx context.Context, req *GetUserOrderRequest) (r *OrdersResponse, err error)

	GetAllOrder(ctx context.Context, req *GetAllOrderRequest) (r *OrdersResponse, err error)
}

type LotteryServiceClient struct {
	c thrift.TClient
}

func NewLotteryServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LotteryServiceClient {
	return &LotteryServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewLotteryServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LotteryServiceClient {
	return &LotteryServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewLotteryServiceClient(c thrift.TClient) *LotteryServiceClient {
	return &LotteryServiceClient{
		c: c,
	}
}

func (p *LotteryServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *LotteryServiceClient) ActivityAdd(ctx context.Context, req *ActivityAddRequest) (r *BaseResponse, err error) {
	var _args LotteryServiceActivityAddArgs
	_args.Req = req
	var _result LotteryServiceActivityAddResult
	if err = p.Client_().Call(ctx, "ActivityAdd", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LotteryServiceClient) ActivityDel(ctx context.Context, req *ActivityDelRequest) (r *BaseResponse, err error) {
	var _args LotteryServiceActivityDelArgs
	_args.Req = req
	var _result LotteryServiceActivityDelResult
	if err = p.Client_().Call(ctx, "ActivityDel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LotteryServiceClient) ActivityUpdate(ctx context.Context, req *ActivityUpdateRequest) (r *BaseResponse, err error) {
	var _args LotteryServiceActivityUpdateArgs
	_args.Req = req
	var _result LotteryServiceActivityUpdateResult
	if err = p.Client_().Call(ctx, "ActivityUpdate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LotteryServiceClient) GetActivityByGid(ctx context.Context, req *GetActivityByGidRequest) (r *ActivitysResponse, err error) {
	var _args LotteryServiceGetActivityByGidArgs
	_args.Req = req
	var _result LotteryServiceGetActivityByGidResult
	if err = p.Client_().Call(ctx, "GetActivityByGid", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LotteryServiceClient) GetAllActivity(ctx context.Context, req *GetAllActivityRequest) (r *ActivitysResponse, err error) {
	var _args LotteryServiceGetAllActivityArgs
	_args.Req = req
	var _result LotteryServiceGetAllActivityResult
	if err = p.Client_().Call(ctx, "GetAllActivity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LotteryServiceClient) GetActivityById(ctx context.Context, req *GetActivityByIdRequest) (r *ActivityResponse, err error) {
	var _args LotteryServiceGetActivityByIdArgs
	_args.Req = req
	var _result LotteryServiceGetActivityByIdResult
	if err = p.Client_().Call(ctx, "GetActivityById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LotteryServiceClient) PrizeAdd(ctx context.Context, req *PrizeAddRequest) (r *BaseResponse, err error) {
	var _args LotteryServicePrizeAddArgs
	_args.Req = req
	var _result LotteryServicePrizeAddResult
	if err = p.Client_().Call(ctx, "PrizeAdd", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LotteryServiceClient) PrizeDel(ctx context.Context, req *PrizeDelRequest) (r *BaseResponse, err error) {
	var _args LotteryServicePrizeDelArgs
	_args.Req = req
	var _result LotteryServicePrizeDelResult
	if err = p.Client_().Call(ctx, "PrizeDel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LotteryServiceClient) PrizeUpdate(ctx context.Context, req *PrizeUpdateRequest) (r *BaseResponse, err error) {
	var _args LotteryServicePrizeUpdateArgs
	_args.Req = req
	var _result LotteryServicePrizeUpdateResult
	if err = p.Client_().Call(ctx, "PrizeUpdate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LotteryServiceClient) GetPrizeByAid(ctx context.Context, req *GetPrizeByAidRequest) (r *PrizesResponse, err error) {
	var _args LotteryServiceGetPrizeByAidArgs
	_args.Req = req
	var _result LotteryServiceGetPrizeByAidResult
	if err = p.Client_().Call(ctx, "GetPrizeByAid", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LotteryServiceClient) GetPrizeById(ctx context.Context, req *GetPrizeByIdRequest) (r *PrizeResponse, err error) {
	var _args LotteryServiceGetPrizeByIdArgs
	_args.Req = req
	var _result LotteryServiceGetPrizeByIdResult
	if err = p.Client_().Call(ctx, "GetPrizeById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LotteryServiceClient) Choose(ctx context.Context) (r *ChooseResponse, err error) {
	var _args LotteryServiceChooseArgs
	var _result LotteryServiceChooseResult
	if err = p.Client_().Call(ctx, "Choose", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LotteryServiceClient) GetUserOrder(ctx context.Context, req *GetUserOrderRequest) (r *OrdersResponse, err error) {
	var _args LotteryServiceGetUserOrderArgs
	_args.Req = req
	var _result LotteryServiceGetUserOrderResult
	if err = p.Client_().Call(ctx, "GetUserOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LotteryServiceClient) GetAllOrder(ctx context.Context, req *GetAllOrderRequest) (r *OrdersResponse, err error) {
	var _args LotteryServiceGetAllOrderArgs
	_args.Req = req
	var _result LotteryServiceGetAllOrderResult
	if err = p.Client_().Call(ctx, "GetAllOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type LotteryServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      LotteryService
}

func (p *LotteryServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *LotteryServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *LotteryServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewLotteryServiceProcessor(handler LotteryService) *LotteryServiceProcessor {
	self := &LotteryServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("ActivityAdd", &lotteryServiceProcessorActivityAdd{handler: handler})
	self.AddToProcessorMap("ActivityDel", &lotteryServiceProcessorActivityDel{handler: handler})
	self.AddToProcessorMap("ActivityUpdate", &lotteryServiceProcessorActivityUpdate{handler: handler})
	self.AddToProcessorMap("GetActivityByGid", &lotteryServiceProcessorGetActivityByGid{handler: handler})
	self.AddToProcessorMap("GetAllActivity", &lotteryServiceProcessorGetAllActivity{handler: handler})
	self.AddToProcessorMap("GetActivityById", &lotteryServiceProcessorGetActivityById{handler: handler})
	self.AddToProcessorMap("PrizeAdd", &lotteryServiceProcessorPrizeAdd{handler: handler})
	self.AddToProcessorMap("PrizeDel", &lotteryServiceProcessorPrizeDel{handler: handler})
	self.AddToProcessorMap("PrizeUpdate", &lotteryServiceProcessorPrizeUpdate{handler: handler})
	self.AddToProcessorMap("GetPrizeByAid", &lotteryServiceProcessorGetPrizeByAid{handler: handler})
	self.AddToProcessorMap("GetPrizeById", &lotteryServiceProcessorGetPrizeById{handler: handler})
	self.AddToProcessorMap("Choose", &lotteryServiceProcessorChoose{handler: handler})
	self.AddToProcessorMap("GetUserOrder", &lotteryServiceProcessorGetUserOrder{handler: handler})
	self.AddToProcessorMap("GetAllOrder", &lotteryServiceProcessorGetAllOrder{handler: handler})
	return self
}
func (p *LotteryServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type lotteryServiceProcessorActivityAdd struct {
	handler LotteryService
}

func (p *lotteryServiceProcessorActivityAdd) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LotteryServiceActivityAddArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ActivityAdd", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LotteryServiceActivityAddResult{}
	var retval *BaseResponse
	if retval, err2 = p.handler.ActivityAdd(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ActivityAdd: "+err2.Error())
		oprot.WriteMessageBegin("ActivityAdd", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ActivityAdd", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type lotteryServiceProcessorActivityDel struct {
	handler LotteryService
}

func (p *lotteryServiceProcessorActivityDel) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LotteryServiceActivityDelArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ActivityDel", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LotteryServiceActivityDelResult{}
	var retval *BaseResponse
	if retval, err2 = p.handler.ActivityDel(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ActivityDel: "+err2.Error())
		oprot.WriteMessageBegin("ActivityDel", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ActivityDel", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type lotteryServiceProcessorActivityUpdate struct {
	handler LotteryService
}

func (p *lotteryServiceProcessorActivityUpdate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LotteryServiceActivityUpdateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ActivityUpdate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LotteryServiceActivityUpdateResult{}
	var retval *BaseResponse
	if retval, err2 = p.handler.ActivityUpdate(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ActivityUpdate: "+err2.Error())
		oprot.WriteMessageBegin("ActivityUpdate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ActivityUpdate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type lotteryServiceProcessorGetActivityByGid struct {
	handler LotteryService
}

func (p *lotteryServiceProcessorGetActivityByGid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LotteryServiceGetActivityByGidArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetActivityByGid", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LotteryServiceGetActivityByGidResult{}
	var retval *ActivitysResponse
	if retval, err2 = p.handler.GetActivityByGid(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetActivityByGid: "+err2.Error())
		oprot.WriteMessageBegin("GetActivityByGid", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetActivityByGid", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type lotteryServiceProcessorGetAllActivity struct {
	handler LotteryService
}

func (p *lotteryServiceProcessorGetAllActivity) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LotteryServiceGetAllActivityArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetAllActivity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LotteryServiceGetAllActivityResult{}
	var retval *ActivitysResponse
	if retval, err2 = p.handler.GetAllActivity(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAllActivity: "+err2.Error())
		oprot.WriteMessageBegin("GetAllActivity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetAllActivity", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type lotteryServiceProcessorGetActivityById struct {
	handler LotteryService
}

func (p *lotteryServiceProcessorGetActivityById) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LotteryServiceGetActivityByIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetActivityById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LotteryServiceGetActivityByIdResult{}
	var retval *ActivityResponse
	if retval, err2 = p.handler.GetActivityById(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetActivityById: "+err2.Error())
		oprot.WriteMessageBegin("GetActivityById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetActivityById", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type lotteryServiceProcessorPrizeAdd struct {
	handler LotteryService
}

func (p *lotteryServiceProcessorPrizeAdd) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LotteryServicePrizeAddArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PrizeAdd", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LotteryServicePrizeAddResult{}
	var retval *BaseResponse
	if retval, err2 = p.handler.PrizeAdd(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PrizeAdd: "+err2.Error())
		oprot.WriteMessageBegin("PrizeAdd", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PrizeAdd", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type lotteryServiceProcessorPrizeDel struct {
	handler LotteryService
}

func (p *lotteryServiceProcessorPrizeDel) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LotteryServicePrizeDelArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PrizeDel", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LotteryServicePrizeDelResult{}
	var retval *BaseResponse
	if retval, err2 = p.handler.PrizeDel(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PrizeDel: "+err2.Error())
		oprot.WriteMessageBegin("PrizeDel", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PrizeDel", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type lotteryServiceProcessorPrizeUpdate struct {
	handler LotteryService
}

func (p *lotteryServiceProcessorPrizeUpdate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LotteryServicePrizeUpdateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PrizeUpdate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LotteryServicePrizeUpdateResult{}
	var retval *BaseResponse
	if retval, err2 = p.handler.PrizeUpdate(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PrizeUpdate: "+err2.Error())
		oprot.WriteMessageBegin("PrizeUpdate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PrizeUpdate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type lotteryServiceProcessorGetPrizeByAid struct {
	handler LotteryService
}

func (p *lotteryServiceProcessorGetPrizeByAid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LotteryServiceGetPrizeByAidArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPrizeByAid", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LotteryServiceGetPrizeByAidResult{}
	var retval *PrizesResponse
	if retval, err2 = p.handler.GetPrizeByAid(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPrizeByAid: "+err2.Error())
		oprot.WriteMessageBegin("GetPrizeByAid", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPrizeByAid", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type lotteryServiceProcessorGetPrizeById struct {
	handler LotteryService
}

func (p *lotteryServiceProcessorGetPrizeById) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LotteryServiceGetPrizeByIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPrizeById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LotteryServiceGetPrizeByIdResult{}
	var retval *PrizeResponse
	if retval, err2 = p.handler.GetPrizeById(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPrizeById: "+err2.Error())
		oprot.WriteMessageBegin("GetPrizeById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPrizeById", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type lotteryServiceProcessorChoose struct {
	handler LotteryService
}

func (p *lotteryServiceProcessorChoose) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LotteryServiceChooseArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Choose", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LotteryServiceChooseResult{}
	var retval *ChooseResponse
	if retval, err2 = p.handler.Choose(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Choose: "+err2.Error())
		oprot.WriteMessageBegin("Choose", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Choose", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type lotteryServiceProcessorGetUserOrder struct {
	handler LotteryService
}

func (p *lotteryServiceProcessorGetUserOrder) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LotteryServiceGetUserOrderArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetUserOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LotteryServiceGetUserOrderResult{}
	var retval *OrdersResponse
	if retval, err2 = p.handler.GetUserOrder(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUserOrder: "+err2.Error())
		oprot.WriteMessageBegin("GetUserOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetUserOrder", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type lotteryServiceProcessorGetAllOrder struct {
	handler LotteryService
}

func (p *lotteryServiceProcessorGetAllOrder) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LotteryServiceGetAllOrderArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetAllOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LotteryServiceGetAllOrderResult{}
	var retval *OrdersResponse
	if retval, err2 = p.handler.GetAllOrder(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAllOrder: "+err2.Error())
		oprot.WriteMessageBegin("GetAllOrder", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetAllOrder", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type LotteryServiceActivityAddArgs struct {
	Req *ActivityAddRequest `thrift:"req,1" frugal:"1,default,ActivityAddRequest" json:"req"`
}

func NewLotteryServiceActivityAddArgs() *LotteryServiceActivityAddArgs {
	return &LotteryServiceActivityAddArgs{}
}

func (p *LotteryServiceActivityAddArgs) InitDefault() {
	*p = LotteryServiceActivityAddArgs{}
}

var LotteryServiceActivityAddArgs_Req_DEFAULT *ActivityAddRequest

func (p *LotteryServiceActivityAddArgs) GetReq() (v *ActivityAddRequest) {
	if !p.IsSetReq() {
		return LotteryServiceActivityAddArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LotteryServiceActivityAddArgs) SetReq(val *ActivityAddRequest) {
	p.Req = val
}

var fieldIDToName_LotteryServiceActivityAddArgs = map[int16]string{
	1: "req",
}

func (p *LotteryServiceActivityAddArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LotteryServiceActivityAddArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceActivityAddArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceActivityAddArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewActivityAddRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LotteryServiceActivityAddArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ActivityAdd_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceActivityAddArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LotteryServiceActivityAddArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceActivityAddArgs(%+v)", *p)
}

func (p *LotteryServiceActivityAddArgs) DeepEqual(ano *LotteryServiceActivityAddArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LotteryServiceActivityAddArgs) Field1DeepEqual(src *ActivityAddRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceActivityAddResult struct {
	Success *BaseResponse `thrift:"success,0,optional" frugal:"0,optional,BaseResponse" json:"success,omitempty"`
}

func NewLotteryServiceActivityAddResult() *LotteryServiceActivityAddResult {
	return &LotteryServiceActivityAddResult{}
}

func (p *LotteryServiceActivityAddResult) InitDefault() {
	*p = LotteryServiceActivityAddResult{}
}

var LotteryServiceActivityAddResult_Success_DEFAULT *BaseResponse

func (p *LotteryServiceActivityAddResult) GetSuccess() (v *BaseResponse) {
	if !p.IsSetSuccess() {
		return LotteryServiceActivityAddResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LotteryServiceActivityAddResult) SetSuccess(x interface{}) {
	p.Success = x.(*BaseResponse)
}

var fieldIDToName_LotteryServiceActivityAddResult = map[int16]string{
	0: "success",
}

func (p *LotteryServiceActivityAddResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LotteryServiceActivityAddResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceActivityAddResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceActivityAddResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBaseResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LotteryServiceActivityAddResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ActivityAdd_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceActivityAddResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LotteryServiceActivityAddResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceActivityAddResult(%+v)", *p)
}

func (p *LotteryServiceActivityAddResult) DeepEqual(ano *LotteryServiceActivityAddResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LotteryServiceActivityAddResult) Field0DeepEqual(src *BaseResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceActivityDelArgs struct {
	Req *ActivityDelRequest `thrift:"req,1" frugal:"1,default,ActivityDelRequest" json:"req"`
}

func NewLotteryServiceActivityDelArgs() *LotteryServiceActivityDelArgs {
	return &LotteryServiceActivityDelArgs{}
}

func (p *LotteryServiceActivityDelArgs) InitDefault() {
	*p = LotteryServiceActivityDelArgs{}
}

var LotteryServiceActivityDelArgs_Req_DEFAULT *ActivityDelRequest

func (p *LotteryServiceActivityDelArgs) GetReq() (v *ActivityDelRequest) {
	if !p.IsSetReq() {
		return LotteryServiceActivityDelArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LotteryServiceActivityDelArgs) SetReq(val *ActivityDelRequest) {
	p.Req = val
}

var fieldIDToName_LotteryServiceActivityDelArgs = map[int16]string{
	1: "req",
}

func (p *LotteryServiceActivityDelArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LotteryServiceActivityDelArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceActivityDelArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceActivityDelArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewActivityDelRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LotteryServiceActivityDelArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ActivityDel_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceActivityDelArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LotteryServiceActivityDelArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceActivityDelArgs(%+v)", *p)
}

func (p *LotteryServiceActivityDelArgs) DeepEqual(ano *LotteryServiceActivityDelArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LotteryServiceActivityDelArgs) Field1DeepEqual(src *ActivityDelRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceActivityDelResult struct {
	Success *BaseResponse `thrift:"success,0,optional" frugal:"0,optional,BaseResponse" json:"success,omitempty"`
}

func NewLotteryServiceActivityDelResult() *LotteryServiceActivityDelResult {
	return &LotteryServiceActivityDelResult{}
}

func (p *LotteryServiceActivityDelResult) InitDefault() {
	*p = LotteryServiceActivityDelResult{}
}

var LotteryServiceActivityDelResult_Success_DEFAULT *BaseResponse

func (p *LotteryServiceActivityDelResult) GetSuccess() (v *BaseResponse) {
	if !p.IsSetSuccess() {
		return LotteryServiceActivityDelResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LotteryServiceActivityDelResult) SetSuccess(x interface{}) {
	p.Success = x.(*BaseResponse)
}

var fieldIDToName_LotteryServiceActivityDelResult = map[int16]string{
	0: "success",
}

func (p *LotteryServiceActivityDelResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LotteryServiceActivityDelResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceActivityDelResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceActivityDelResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBaseResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LotteryServiceActivityDelResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ActivityDel_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceActivityDelResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LotteryServiceActivityDelResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceActivityDelResult(%+v)", *p)
}

func (p *LotteryServiceActivityDelResult) DeepEqual(ano *LotteryServiceActivityDelResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LotteryServiceActivityDelResult) Field0DeepEqual(src *BaseResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceActivityUpdateArgs struct {
	Req *ActivityUpdateRequest `thrift:"req,1" frugal:"1,default,ActivityUpdateRequest" json:"req"`
}

func NewLotteryServiceActivityUpdateArgs() *LotteryServiceActivityUpdateArgs {
	return &LotteryServiceActivityUpdateArgs{}
}

func (p *LotteryServiceActivityUpdateArgs) InitDefault() {
	*p = LotteryServiceActivityUpdateArgs{}
}

var LotteryServiceActivityUpdateArgs_Req_DEFAULT *ActivityUpdateRequest

func (p *LotteryServiceActivityUpdateArgs) GetReq() (v *ActivityUpdateRequest) {
	if !p.IsSetReq() {
		return LotteryServiceActivityUpdateArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LotteryServiceActivityUpdateArgs) SetReq(val *ActivityUpdateRequest) {
	p.Req = val
}

var fieldIDToName_LotteryServiceActivityUpdateArgs = map[int16]string{
	1: "req",
}

func (p *LotteryServiceActivityUpdateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LotteryServiceActivityUpdateArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceActivityUpdateArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceActivityUpdateArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewActivityUpdateRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LotteryServiceActivityUpdateArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ActivityUpdate_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceActivityUpdateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LotteryServiceActivityUpdateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceActivityUpdateArgs(%+v)", *p)
}

func (p *LotteryServiceActivityUpdateArgs) DeepEqual(ano *LotteryServiceActivityUpdateArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LotteryServiceActivityUpdateArgs) Field1DeepEqual(src *ActivityUpdateRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceActivityUpdateResult struct {
	Success *BaseResponse `thrift:"success,0,optional" frugal:"0,optional,BaseResponse" json:"success,omitempty"`
}

func NewLotteryServiceActivityUpdateResult() *LotteryServiceActivityUpdateResult {
	return &LotteryServiceActivityUpdateResult{}
}

func (p *LotteryServiceActivityUpdateResult) InitDefault() {
	*p = LotteryServiceActivityUpdateResult{}
}

var LotteryServiceActivityUpdateResult_Success_DEFAULT *BaseResponse

func (p *LotteryServiceActivityUpdateResult) GetSuccess() (v *BaseResponse) {
	if !p.IsSetSuccess() {
		return LotteryServiceActivityUpdateResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LotteryServiceActivityUpdateResult) SetSuccess(x interface{}) {
	p.Success = x.(*BaseResponse)
}

var fieldIDToName_LotteryServiceActivityUpdateResult = map[int16]string{
	0: "success",
}

func (p *LotteryServiceActivityUpdateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LotteryServiceActivityUpdateResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceActivityUpdateResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceActivityUpdateResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBaseResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LotteryServiceActivityUpdateResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ActivityUpdate_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceActivityUpdateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LotteryServiceActivityUpdateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceActivityUpdateResult(%+v)", *p)
}

func (p *LotteryServiceActivityUpdateResult) DeepEqual(ano *LotteryServiceActivityUpdateResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LotteryServiceActivityUpdateResult) Field0DeepEqual(src *BaseResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceGetActivityByGidArgs struct {
	Req *GetActivityByGidRequest `thrift:"req,1" frugal:"1,default,GetActivityByGidRequest" json:"req"`
}

func NewLotteryServiceGetActivityByGidArgs() *LotteryServiceGetActivityByGidArgs {
	return &LotteryServiceGetActivityByGidArgs{}
}

func (p *LotteryServiceGetActivityByGidArgs) InitDefault() {
	*p = LotteryServiceGetActivityByGidArgs{}
}

var LotteryServiceGetActivityByGidArgs_Req_DEFAULT *GetActivityByGidRequest

func (p *LotteryServiceGetActivityByGidArgs) GetReq() (v *GetActivityByGidRequest) {
	if !p.IsSetReq() {
		return LotteryServiceGetActivityByGidArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LotteryServiceGetActivityByGidArgs) SetReq(val *GetActivityByGidRequest) {
	p.Req = val
}

var fieldIDToName_LotteryServiceGetActivityByGidArgs = map[int16]string{
	1: "req",
}

func (p *LotteryServiceGetActivityByGidArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LotteryServiceGetActivityByGidArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceGetActivityByGidArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceGetActivityByGidArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetActivityByGidRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LotteryServiceGetActivityByGidArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetActivityByGid_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceGetActivityByGidArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LotteryServiceGetActivityByGidArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceGetActivityByGidArgs(%+v)", *p)
}

func (p *LotteryServiceGetActivityByGidArgs) DeepEqual(ano *LotteryServiceGetActivityByGidArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LotteryServiceGetActivityByGidArgs) Field1DeepEqual(src *GetActivityByGidRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceGetActivityByGidResult struct {
	Success *ActivitysResponse `thrift:"success,0,optional" frugal:"0,optional,ActivitysResponse" json:"success,omitempty"`
}

func NewLotteryServiceGetActivityByGidResult() *LotteryServiceGetActivityByGidResult {
	return &LotteryServiceGetActivityByGidResult{}
}

func (p *LotteryServiceGetActivityByGidResult) InitDefault() {
	*p = LotteryServiceGetActivityByGidResult{}
}

var LotteryServiceGetActivityByGidResult_Success_DEFAULT *ActivitysResponse

func (p *LotteryServiceGetActivityByGidResult) GetSuccess() (v *ActivitysResponse) {
	if !p.IsSetSuccess() {
		return LotteryServiceGetActivityByGidResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LotteryServiceGetActivityByGidResult) SetSuccess(x interface{}) {
	p.Success = x.(*ActivitysResponse)
}

var fieldIDToName_LotteryServiceGetActivityByGidResult = map[int16]string{
	0: "success",
}

func (p *LotteryServiceGetActivityByGidResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LotteryServiceGetActivityByGidResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceGetActivityByGidResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceGetActivityByGidResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewActivitysResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LotteryServiceGetActivityByGidResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetActivityByGid_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceGetActivityByGidResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LotteryServiceGetActivityByGidResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceGetActivityByGidResult(%+v)", *p)
}

func (p *LotteryServiceGetActivityByGidResult) DeepEqual(ano *LotteryServiceGetActivityByGidResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LotteryServiceGetActivityByGidResult) Field0DeepEqual(src *ActivitysResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceGetAllActivityArgs struct {
	Req *GetAllActivityRequest `thrift:"req,1" frugal:"1,default,GetAllActivityRequest" json:"req"`
}

func NewLotteryServiceGetAllActivityArgs() *LotteryServiceGetAllActivityArgs {
	return &LotteryServiceGetAllActivityArgs{}
}

func (p *LotteryServiceGetAllActivityArgs) InitDefault() {
	*p = LotteryServiceGetAllActivityArgs{}
}

var LotteryServiceGetAllActivityArgs_Req_DEFAULT *GetAllActivityRequest

func (p *LotteryServiceGetAllActivityArgs) GetReq() (v *GetAllActivityRequest) {
	if !p.IsSetReq() {
		return LotteryServiceGetAllActivityArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LotteryServiceGetAllActivityArgs) SetReq(val *GetAllActivityRequest) {
	p.Req = val
}

var fieldIDToName_LotteryServiceGetAllActivityArgs = map[int16]string{
	1: "req",
}

func (p *LotteryServiceGetAllActivityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LotteryServiceGetAllActivityArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceGetAllActivityArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceGetAllActivityArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetAllActivityRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LotteryServiceGetAllActivityArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAllActivity_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceGetAllActivityArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LotteryServiceGetAllActivityArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceGetAllActivityArgs(%+v)", *p)
}

func (p *LotteryServiceGetAllActivityArgs) DeepEqual(ano *LotteryServiceGetAllActivityArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LotteryServiceGetAllActivityArgs) Field1DeepEqual(src *GetAllActivityRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceGetAllActivityResult struct {
	Success *ActivitysResponse `thrift:"success,0,optional" frugal:"0,optional,ActivitysResponse" json:"success,omitempty"`
}

func NewLotteryServiceGetAllActivityResult() *LotteryServiceGetAllActivityResult {
	return &LotteryServiceGetAllActivityResult{}
}

func (p *LotteryServiceGetAllActivityResult) InitDefault() {
	*p = LotteryServiceGetAllActivityResult{}
}

var LotteryServiceGetAllActivityResult_Success_DEFAULT *ActivitysResponse

func (p *LotteryServiceGetAllActivityResult) GetSuccess() (v *ActivitysResponse) {
	if !p.IsSetSuccess() {
		return LotteryServiceGetAllActivityResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LotteryServiceGetAllActivityResult) SetSuccess(x interface{}) {
	p.Success = x.(*ActivitysResponse)
}

var fieldIDToName_LotteryServiceGetAllActivityResult = map[int16]string{
	0: "success",
}

func (p *LotteryServiceGetAllActivityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LotteryServiceGetAllActivityResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceGetAllActivityResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceGetAllActivityResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewActivitysResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LotteryServiceGetAllActivityResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAllActivity_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceGetAllActivityResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LotteryServiceGetAllActivityResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceGetAllActivityResult(%+v)", *p)
}

func (p *LotteryServiceGetAllActivityResult) DeepEqual(ano *LotteryServiceGetAllActivityResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LotteryServiceGetAllActivityResult) Field0DeepEqual(src *ActivitysResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceGetActivityByIdArgs struct {
	Req *GetActivityByIdRequest `thrift:"req,1" frugal:"1,default,GetActivityByIdRequest" json:"req"`
}

func NewLotteryServiceGetActivityByIdArgs() *LotteryServiceGetActivityByIdArgs {
	return &LotteryServiceGetActivityByIdArgs{}
}

func (p *LotteryServiceGetActivityByIdArgs) InitDefault() {
	*p = LotteryServiceGetActivityByIdArgs{}
}

var LotteryServiceGetActivityByIdArgs_Req_DEFAULT *GetActivityByIdRequest

func (p *LotteryServiceGetActivityByIdArgs) GetReq() (v *GetActivityByIdRequest) {
	if !p.IsSetReq() {
		return LotteryServiceGetActivityByIdArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LotteryServiceGetActivityByIdArgs) SetReq(val *GetActivityByIdRequest) {
	p.Req = val
}

var fieldIDToName_LotteryServiceGetActivityByIdArgs = map[int16]string{
	1: "req",
}

func (p *LotteryServiceGetActivityByIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LotteryServiceGetActivityByIdArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceGetActivityByIdArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceGetActivityByIdArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetActivityByIdRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LotteryServiceGetActivityByIdArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetActivityById_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceGetActivityByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LotteryServiceGetActivityByIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceGetActivityByIdArgs(%+v)", *p)
}

func (p *LotteryServiceGetActivityByIdArgs) DeepEqual(ano *LotteryServiceGetActivityByIdArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LotteryServiceGetActivityByIdArgs) Field1DeepEqual(src *GetActivityByIdRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceGetActivityByIdResult struct {
	Success *ActivityResponse `thrift:"success,0,optional" frugal:"0,optional,ActivityResponse" json:"success,omitempty"`
}

func NewLotteryServiceGetActivityByIdResult() *LotteryServiceGetActivityByIdResult {
	return &LotteryServiceGetActivityByIdResult{}
}

func (p *LotteryServiceGetActivityByIdResult) InitDefault() {
	*p = LotteryServiceGetActivityByIdResult{}
}

var LotteryServiceGetActivityByIdResult_Success_DEFAULT *ActivityResponse

func (p *LotteryServiceGetActivityByIdResult) GetSuccess() (v *ActivityResponse) {
	if !p.IsSetSuccess() {
		return LotteryServiceGetActivityByIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LotteryServiceGetActivityByIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*ActivityResponse)
}

var fieldIDToName_LotteryServiceGetActivityByIdResult = map[int16]string{
	0: "success",
}

func (p *LotteryServiceGetActivityByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LotteryServiceGetActivityByIdResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceGetActivityByIdResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceGetActivityByIdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewActivityResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LotteryServiceGetActivityByIdResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetActivityById_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceGetActivityByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LotteryServiceGetActivityByIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceGetActivityByIdResult(%+v)", *p)
}

func (p *LotteryServiceGetActivityByIdResult) DeepEqual(ano *LotteryServiceGetActivityByIdResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LotteryServiceGetActivityByIdResult) Field0DeepEqual(src *ActivityResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServicePrizeAddArgs struct {
	Req *PrizeAddRequest `thrift:"req,1" frugal:"1,default,PrizeAddRequest" json:"req"`
}

func NewLotteryServicePrizeAddArgs() *LotteryServicePrizeAddArgs {
	return &LotteryServicePrizeAddArgs{}
}

func (p *LotteryServicePrizeAddArgs) InitDefault() {
	*p = LotteryServicePrizeAddArgs{}
}

var LotteryServicePrizeAddArgs_Req_DEFAULT *PrizeAddRequest

func (p *LotteryServicePrizeAddArgs) GetReq() (v *PrizeAddRequest) {
	if !p.IsSetReq() {
		return LotteryServicePrizeAddArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LotteryServicePrizeAddArgs) SetReq(val *PrizeAddRequest) {
	p.Req = val
}

var fieldIDToName_LotteryServicePrizeAddArgs = map[int16]string{
	1: "req",
}

func (p *LotteryServicePrizeAddArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LotteryServicePrizeAddArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServicePrizeAddArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServicePrizeAddArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewPrizeAddRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LotteryServicePrizeAddArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PrizeAdd_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServicePrizeAddArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LotteryServicePrizeAddArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServicePrizeAddArgs(%+v)", *p)
}

func (p *LotteryServicePrizeAddArgs) DeepEqual(ano *LotteryServicePrizeAddArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LotteryServicePrizeAddArgs) Field1DeepEqual(src *PrizeAddRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServicePrizeAddResult struct {
	Success *BaseResponse `thrift:"success,0,optional" frugal:"0,optional,BaseResponse" json:"success,omitempty"`
}

func NewLotteryServicePrizeAddResult() *LotteryServicePrizeAddResult {
	return &LotteryServicePrizeAddResult{}
}

func (p *LotteryServicePrizeAddResult) InitDefault() {
	*p = LotteryServicePrizeAddResult{}
}

var LotteryServicePrizeAddResult_Success_DEFAULT *BaseResponse

func (p *LotteryServicePrizeAddResult) GetSuccess() (v *BaseResponse) {
	if !p.IsSetSuccess() {
		return LotteryServicePrizeAddResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LotteryServicePrizeAddResult) SetSuccess(x interface{}) {
	p.Success = x.(*BaseResponse)
}

var fieldIDToName_LotteryServicePrizeAddResult = map[int16]string{
	0: "success",
}

func (p *LotteryServicePrizeAddResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LotteryServicePrizeAddResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServicePrizeAddResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServicePrizeAddResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBaseResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LotteryServicePrizeAddResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PrizeAdd_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServicePrizeAddResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LotteryServicePrizeAddResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServicePrizeAddResult(%+v)", *p)
}

func (p *LotteryServicePrizeAddResult) DeepEqual(ano *LotteryServicePrizeAddResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LotteryServicePrizeAddResult) Field0DeepEqual(src *BaseResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServicePrizeDelArgs struct {
	Req *PrizeDelRequest `thrift:"req,1" frugal:"1,default,PrizeDelRequest" json:"req"`
}

func NewLotteryServicePrizeDelArgs() *LotteryServicePrizeDelArgs {
	return &LotteryServicePrizeDelArgs{}
}

func (p *LotteryServicePrizeDelArgs) InitDefault() {
	*p = LotteryServicePrizeDelArgs{}
}

var LotteryServicePrizeDelArgs_Req_DEFAULT *PrizeDelRequest

func (p *LotteryServicePrizeDelArgs) GetReq() (v *PrizeDelRequest) {
	if !p.IsSetReq() {
		return LotteryServicePrizeDelArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LotteryServicePrizeDelArgs) SetReq(val *PrizeDelRequest) {
	p.Req = val
}

var fieldIDToName_LotteryServicePrizeDelArgs = map[int16]string{
	1: "req",
}

func (p *LotteryServicePrizeDelArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LotteryServicePrizeDelArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServicePrizeDelArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServicePrizeDelArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewPrizeDelRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LotteryServicePrizeDelArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PrizeDel_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServicePrizeDelArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LotteryServicePrizeDelArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServicePrizeDelArgs(%+v)", *p)
}

func (p *LotteryServicePrizeDelArgs) DeepEqual(ano *LotteryServicePrizeDelArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LotteryServicePrizeDelArgs) Field1DeepEqual(src *PrizeDelRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServicePrizeDelResult struct {
	Success *BaseResponse `thrift:"success,0,optional" frugal:"0,optional,BaseResponse" json:"success,omitempty"`
}

func NewLotteryServicePrizeDelResult() *LotteryServicePrizeDelResult {
	return &LotteryServicePrizeDelResult{}
}

func (p *LotteryServicePrizeDelResult) InitDefault() {
	*p = LotteryServicePrizeDelResult{}
}

var LotteryServicePrizeDelResult_Success_DEFAULT *BaseResponse

func (p *LotteryServicePrizeDelResult) GetSuccess() (v *BaseResponse) {
	if !p.IsSetSuccess() {
		return LotteryServicePrizeDelResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LotteryServicePrizeDelResult) SetSuccess(x interface{}) {
	p.Success = x.(*BaseResponse)
}

var fieldIDToName_LotteryServicePrizeDelResult = map[int16]string{
	0: "success",
}

func (p *LotteryServicePrizeDelResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LotteryServicePrizeDelResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServicePrizeDelResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServicePrizeDelResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBaseResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LotteryServicePrizeDelResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PrizeDel_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServicePrizeDelResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LotteryServicePrizeDelResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServicePrizeDelResult(%+v)", *p)
}

func (p *LotteryServicePrizeDelResult) DeepEqual(ano *LotteryServicePrizeDelResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LotteryServicePrizeDelResult) Field0DeepEqual(src *BaseResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServicePrizeUpdateArgs struct {
	Req *PrizeUpdateRequest `thrift:"req,1" frugal:"1,default,PrizeUpdateRequest" json:"req"`
}

func NewLotteryServicePrizeUpdateArgs() *LotteryServicePrizeUpdateArgs {
	return &LotteryServicePrizeUpdateArgs{}
}

func (p *LotteryServicePrizeUpdateArgs) InitDefault() {
	*p = LotteryServicePrizeUpdateArgs{}
}

var LotteryServicePrizeUpdateArgs_Req_DEFAULT *PrizeUpdateRequest

func (p *LotteryServicePrizeUpdateArgs) GetReq() (v *PrizeUpdateRequest) {
	if !p.IsSetReq() {
		return LotteryServicePrizeUpdateArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LotteryServicePrizeUpdateArgs) SetReq(val *PrizeUpdateRequest) {
	p.Req = val
}

var fieldIDToName_LotteryServicePrizeUpdateArgs = map[int16]string{
	1: "req",
}

func (p *LotteryServicePrizeUpdateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LotteryServicePrizeUpdateArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServicePrizeUpdateArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServicePrizeUpdateArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewPrizeUpdateRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LotteryServicePrizeUpdateArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PrizeUpdate_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServicePrizeUpdateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LotteryServicePrizeUpdateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServicePrizeUpdateArgs(%+v)", *p)
}

func (p *LotteryServicePrizeUpdateArgs) DeepEqual(ano *LotteryServicePrizeUpdateArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LotteryServicePrizeUpdateArgs) Field1DeepEqual(src *PrizeUpdateRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServicePrizeUpdateResult struct {
	Success *BaseResponse `thrift:"success,0,optional" frugal:"0,optional,BaseResponse" json:"success,omitempty"`
}

func NewLotteryServicePrizeUpdateResult() *LotteryServicePrizeUpdateResult {
	return &LotteryServicePrizeUpdateResult{}
}

func (p *LotteryServicePrizeUpdateResult) InitDefault() {
	*p = LotteryServicePrizeUpdateResult{}
}

var LotteryServicePrizeUpdateResult_Success_DEFAULT *BaseResponse

func (p *LotteryServicePrizeUpdateResult) GetSuccess() (v *BaseResponse) {
	if !p.IsSetSuccess() {
		return LotteryServicePrizeUpdateResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LotteryServicePrizeUpdateResult) SetSuccess(x interface{}) {
	p.Success = x.(*BaseResponse)
}

var fieldIDToName_LotteryServicePrizeUpdateResult = map[int16]string{
	0: "success",
}

func (p *LotteryServicePrizeUpdateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LotteryServicePrizeUpdateResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServicePrizeUpdateResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServicePrizeUpdateResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBaseResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LotteryServicePrizeUpdateResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PrizeUpdate_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServicePrizeUpdateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LotteryServicePrizeUpdateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServicePrizeUpdateResult(%+v)", *p)
}

func (p *LotteryServicePrizeUpdateResult) DeepEqual(ano *LotteryServicePrizeUpdateResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LotteryServicePrizeUpdateResult) Field0DeepEqual(src *BaseResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceGetPrizeByAidArgs struct {
	Req *GetPrizeByAidRequest `thrift:"req,1" frugal:"1,default,GetPrizeByAidRequest" json:"req"`
}

func NewLotteryServiceGetPrizeByAidArgs() *LotteryServiceGetPrizeByAidArgs {
	return &LotteryServiceGetPrizeByAidArgs{}
}

func (p *LotteryServiceGetPrizeByAidArgs) InitDefault() {
	*p = LotteryServiceGetPrizeByAidArgs{}
}

var LotteryServiceGetPrizeByAidArgs_Req_DEFAULT *GetPrizeByAidRequest

func (p *LotteryServiceGetPrizeByAidArgs) GetReq() (v *GetPrizeByAidRequest) {
	if !p.IsSetReq() {
		return LotteryServiceGetPrizeByAidArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LotteryServiceGetPrizeByAidArgs) SetReq(val *GetPrizeByAidRequest) {
	p.Req = val
}

var fieldIDToName_LotteryServiceGetPrizeByAidArgs = map[int16]string{
	1: "req",
}

func (p *LotteryServiceGetPrizeByAidArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LotteryServiceGetPrizeByAidArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceGetPrizeByAidArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceGetPrizeByAidArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetPrizeByAidRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LotteryServiceGetPrizeByAidArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPrizeByAid_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceGetPrizeByAidArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LotteryServiceGetPrizeByAidArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceGetPrizeByAidArgs(%+v)", *p)
}

func (p *LotteryServiceGetPrizeByAidArgs) DeepEqual(ano *LotteryServiceGetPrizeByAidArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LotteryServiceGetPrizeByAidArgs) Field1DeepEqual(src *GetPrizeByAidRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceGetPrizeByAidResult struct {
	Success *PrizesResponse `thrift:"success,0,optional" frugal:"0,optional,PrizesResponse" json:"success,omitempty"`
}

func NewLotteryServiceGetPrizeByAidResult() *LotteryServiceGetPrizeByAidResult {
	return &LotteryServiceGetPrizeByAidResult{}
}

func (p *LotteryServiceGetPrizeByAidResult) InitDefault() {
	*p = LotteryServiceGetPrizeByAidResult{}
}

var LotteryServiceGetPrizeByAidResult_Success_DEFAULT *PrizesResponse

func (p *LotteryServiceGetPrizeByAidResult) GetSuccess() (v *PrizesResponse) {
	if !p.IsSetSuccess() {
		return LotteryServiceGetPrizeByAidResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LotteryServiceGetPrizeByAidResult) SetSuccess(x interface{}) {
	p.Success = x.(*PrizesResponse)
}

var fieldIDToName_LotteryServiceGetPrizeByAidResult = map[int16]string{
	0: "success",
}

func (p *LotteryServiceGetPrizeByAidResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LotteryServiceGetPrizeByAidResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceGetPrizeByAidResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceGetPrizeByAidResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewPrizesResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LotteryServiceGetPrizeByAidResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPrizeByAid_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceGetPrizeByAidResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LotteryServiceGetPrizeByAidResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceGetPrizeByAidResult(%+v)", *p)
}

func (p *LotteryServiceGetPrizeByAidResult) DeepEqual(ano *LotteryServiceGetPrizeByAidResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LotteryServiceGetPrizeByAidResult) Field0DeepEqual(src *PrizesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceGetPrizeByIdArgs struct {
	Req *GetPrizeByIdRequest `thrift:"req,1" frugal:"1,default,GetPrizeByIdRequest" json:"req"`
}

func NewLotteryServiceGetPrizeByIdArgs() *LotteryServiceGetPrizeByIdArgs {
	return &LotteryServiceGetPrizeByIdArgs{}
}

func (p *LotteryServiceGetPrizeByIdArgs) InitDefault() {
	*p = LotteryServiceGetPrizeByIdArgs{}
}

var LotteryServiceGetPrizeByIdArgs_Req_DEFAULT *GetPrizeByIdRequest

func (p *LotteryServiceGetPrizeByIdArgs) GetReq() (v *GetPrizeByIdRequest) {
	if !p.IsSetReq() {
		return LotteryServiceGetPrizeByIdArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LotteryServiceGetPrizeByIdArgs) SetReq(val *GetPrizeByIdRequest) {
	p.Req = val
}

var fieldIDToName_LotteryServiceGetPrizeByIdArgs = map[int16]string{
	1: "req",
}

func (p *LotteryServiceGetPrizeByIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LotteryServiceGetPrizeByIdArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceGetPrizeByIdArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceGetPrizeByIdArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetPrizeByIdRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LotteryServiceGetPrizeByIdArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPrizeById_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceGetPrizeByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LotteryServiceGetPrizeByIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceGetPrizeByIdArgs(%+v)", *p)
}

func (p *LotteryServiceGetPrizeByIdArgs) DeepEqual(ano *LotteryServiceGetPrizeByIdArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LotteryServiceGetPrizeByIdArgs) Field1DeepEqual(src *GetPrizeByIdRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceGetPrizeByIdResult struct {
	Success *PrizeResponse `thrift:"success,0,optional" frugal:"0,optional,PrizeResponse" json:"success,omitempty"`
}

func NewLotteryServiceGetPrizeByIdResult() *LotteryServiceGetPrizeByIdResult {
	return &LotteryServiceGetPrizeByIdResult{}
}

func (p *LotteryServiceGetPrizeByIdResult) InitDefault() {
	*p = LotteryServiceGetPrizeByIdResult{}
}

var LotteryServiceGetPrizeByIdResult_Success_DEFAULT *PrizeResponse

func (p *LotteryServiceGetPrizeByIdResult) GetSuccess() (v *PrizeResponse) {
	if !p.IsSetSuccess() {
		return LotteryServiceGetPrizeByIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LotteryServiceGetPrizeByIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*PrizeResponse)
}

var fieldIDToName_LotteryServiceGetPrizeByIdResult = map[int16]string{
	0: "success",
}

func (p *LotteryServiceGetPrizeByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LotteryServiceGetPrizeByIdResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceGetPrizeByIdResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceGetPrizeByIdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewPrizeResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LotteryServiceGetPrizeByIdResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPrizeById_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceGetPrizeByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LotteryServiceGetPrizeByIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceGetPrizeByIdResult(%+v)", *p)
}

func (p *LotteryServiceGetPrizeByIdResult) DeepEqual(ano *LotteryServiceGetPrizeByIdResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LotteryServiceGetPrizeByIdResult) Field0DeepEqual(src *PrizeResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceChooseArgs struct {
}

func NewLotteryServiceChooseArgs() *LotteryServiceChooseArgs {
	return &LotteryServiceChooseArgs{}
}

func (p *LotteryServiceChooseArgs) InitDefault() {
	*p = LotteryServiceChooseArgs{}
}

var fieldIDToName_LotteryServiceChooseArgs = map[int16]string{}

func (p *LotteryServiceChooseArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceChooseArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("Choose_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceChooseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceChooseArgs(%+v)", *p)
}

func (p *LotteryServiceChooseArgs) DeepEqual(ano *LotteryServiceChooseArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type LotteryServiceChooseResult struct {
	Success *ChooseResponse `thrift:"success,0,optional" frugal:"0,optional,ChooseResponse" json:"success,omitempty"`
}

func NewLotteryServiceChooseResult() *LotteryServiceChooseResult {
	return &LotteryServiceChooseResult{}
}

func (p *LotteryServiceChooseResult) InitDefault() {
	*p = LotteryServiceChooseResult{}
}

var LotteryServiceChooseResult_Success_DEFAULT *ChooseResponse

func (p *LotteryServiceChooseResult) GetSuccess() (v *ChooseResponse) {
	if !p.IsSetSuccess() {
		return LotteryServiceChooseResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LotteryServiceChooseResult) SetSuccess(x interface{}) {
	p.Success = x.(*ChooseResponse)
}

var fieldIDToName_LotteryServiceChooseResult = map[int16]string{
	0: "success",
}

func (p *LotteryServiceChooseResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LotteryServiceChooseResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceChooseResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceChooseResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewChooseResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LotteryServiceChooseResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Choose_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceChooseResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LotteryServiceChooseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceChooseResult(%+v)", *p)
}

func (p *LotteryServiceChooseResult) DeepEqual(ano *LotteryServiceChooseResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LotteryServiceChooseResult) Field0DeepEqual(src *ChooseResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceGetUserOrderArgs struct {
	Req *GetUserOrderRequest `thrift:"req,1" frugal:"1,default,GetUserOrderRequest" json:"req"`
}

func NewLotteryServiceGetUserOrderArgs() *LotteryServiceGetUserOrderArgs {
	return &LotteryServiceGetUserOrderArgs{}
}

func (p *LotteryServiceGetUserOrderArgs) InitDefault() {
	*p = LotteryServiceGetUserOrderArgs{}
}

var LotteryServiceGetUserOrderArgs_Req_DEFAULT *GetUserOrderRequest

func (p *LotteryServiceGetUserOrderArgs) GetReq() (v *GetUserOrderRequest) {
	if !p.IsSetReq() {
		return LotteryServiceGetUserOrderArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LotteryServiceGetUserOrderArgs) SetReq(val *GetUserOrderRequest) {
	p.Req = val
}

var fieldIDToName_LotteryServiceGetUserOrderArgs = map[int16]string{
	1: "req",
}

func (p *LotteryServiceGetUserOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LotteryServiceGetUserOrderArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceGetUserOrderArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceGetUserOrderArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetUserOrderRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LotteryServiceGetUserOrderArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserOrder_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceGetUserOrderArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LotteryServiceGetUserOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceGetUserOrderArgs(%+v)", *p)
}

func (p *LotteryServiceGetUserOrderArgs) DeepEqual(ano *LotteryServiceGetUserOrderArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LotteryServiceGetUserOrderArgs) Field1DeepEqual(src *GetUserOrderRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceGetUserOrderResult struct {
	Success *OrdersResponse `thrift:"success,0,optional" frugal:"0,optional,OrdersResponse" json:"success,omitempty"`
}

func NewLotteryServiceGetUserOrderResult() *LotteryServiceGetUserOrderResult {
	return &LotteryServiceGetUserOrderResult{}
}

func (p *LotteryServiceGetUserOrderResult) InitDefault() {
	*p = LotteryServiceGetUserOrderResult{}
}

var LotteryServiceGetUserOrderResult_Success_DEFAULT *OrdersResponse

func (p *LotteryServiceGetUserOrderResult) GetSuccess() (v *OrdersResponse) {
	if !p.IsSetSuccess() {
		return LotteryServiceGetUserOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LotteryServiceGetUserOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*OrdersResponse)
}

var fieldIDToName_LotteryServiceGetUserOrderResult = map[int16]string{
	0: "success",
}

func (p *LotteryServiceGetUserOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LotteryServiceGetUserOrderResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceGetUserOrderResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceGetUserOrderResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewOrdersResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LotteryServiceGetUserOrderResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserOrder_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceGetUserOrderResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LotteryServiceGetUserOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceGetUserOrderResult(%+v)", *p)
}

func (p *LotteryServiceGetUserOrderResult) DeepEqual(ano *LotteryServiceGetUserOrderResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LotteryServiceGetUserOrderResult) Field0DeepEqual(src *OrdersResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceGetAllOrderArgs struct {
	Req *GetAllOrderRequest `thrift:"req,1" frugal:"1,default,GetAllOrderRequest" json:"req"`
}

func NewLotteryServiceGetAllOrderArgs() *LotteryServiceGetAllOrderArgs {
	return &LotteryServiceGetAllOrderArgs{}
}

func (p *LotteryServiceGetAllOrderArgs) InitDefault() {
	*p = LotteryServiceGetAllOrderArgs{}
}

var LotteryServiceGetAllOrderArgs_Req_DEFAULT *GetAllOrderRequest

func (p *LotteryServiceGetAllOrderArgs) GetReq() (v *GetAllOrderRequest) {
	if !p.IsSetReq() {
		return LotteryServiceGetAllOrderArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LotteryServiceGetAllOrderArgs) SetReq(val *GetAllOrderRequest) {
	p.Req = val
}

var fieldIDToName_LotteryServiceGetAllOrderArgs = map[int16]string{
	1: "req",
}

func (p *LotteryServiceGetAllOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LotteryServiceGetAllOrderArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceGetAllOrderArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceGetAllOrderArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetAllOrderRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LotteryServiceGetAllOrderArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAllOrder_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceGetAllOrderArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LotteryServiceGetAllOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceGetAllOrderArgs(%+v)", *p)
}

func (p *LotteryServiceGetAllOrderArgs) DeepEqual(ano *LotteryServiceGetAllOrderArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LotteryServiceGetAllOrderArgs) Field1DeepEqual(src *GetAllOrderRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceGetAllOrderResult struct {
	Success *OrdersResponse `thrift:"success,0,optional" frugal:"0,optional,OrdersResponse" json:"success,omitempty"`
}

func NewLotteryServiceGetAllOrderResult() *LotteryServiceGetAllOrderResult {
	return &LotteryServiceGetAllOrderResult{}
}

func (p *LotteryServiceGetAllOrderResult) InitDefault() {
	*p = LotteryServiceGetAllOrderResult{}
}

var LotteryServiceGetAllOrderResult_Success_DEFAULT *OrdersResponse

func (p *LotteryServiceGetAllOrderResult) GetSuccess() (v *OrdersResponse) {
	if !p.IsSetSuccess() {
		return LotteryServiceGetAllOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LotteryServiceGetAllOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*OrdersResponse)
}

var fieldIDToName_LotteryServiceGetAllOrderResult = map[int16]string{
	0: "success",
}

func (p *LotteryServiceGetAllOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LotteryServiceGetAllOrderResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceGetAllOrderResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceGetAllOrderResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewOrdersResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LotteryServiceGetAllOrderResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAllOrder_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceGetAllOrderResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LotteryServiceGetAllOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceGetAllOrderResult(%+v)", *p)
}

func (p *LotteryServiceGetAllOrderResult) DeepEqual(ano *LotteryServiceGetAllOrderResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LotteryServiceGetAllOrderResult) Field0DeepEqual(src *OrdersResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
