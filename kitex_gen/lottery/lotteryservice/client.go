// Code generated by Kitex v0.5.1. DO NOT EDIT.

package lotteryservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	lottery "sign-lottery/kitex_gen/lottery"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	ActivityAdd(ctx context.Context, req *lottery.ActivityAddRequest, callOptions ...callopt.Option) (r *lottery.BaseResponse, err error)
	ActivityDel(ctx context.Context, req *lottery.ActivityDelRequest, callOptions ...callopt.Option) (r *lottery.BaseResponse, err error)
	ActivityUpdate(ctx context.Context, req *lottery.ActivityUpdateRequest, callOptions ...callopt.Option) (r *lottery.BaseResponse, err error)
	GetActivityByGid(ctx context.Context, req *lottery.GetActivityByGidRequest, callOptions ...callopt.Option) (r *lottery.ActivitysResponse, err error)
	GetAllActivity(ctx context.Context, req *lottery.GetAllActivityRequest, callOptions ...callopt.Option) (r *lottery.ActivitysResponse, err error)
	GetActivityById(ctx context.Context, req *lottery.GetActivityByIdRequest, callOptions ...callopt.Option) (r *lottery.ActivityResponse, err error)
	PrizeAdd(ctx context.Context, req *lottery.PrizeAddRequest, callOptions ...callopt.Option) (r *lottery.BaseResponse, err error)
	PrizeDel(ctx context.Context, req *lottery.PrizeDelRequest, callOptions ...callopt.Option) (r *lottery.BaseResponse, err error)
	PrizeUpdate(ctx context.Context, req *lottery.PrizeUpdateRequest, callOptions ...callopt.Option) (r *lottery.BaseResponse, err error)
	GetPrizeByAid(ctx context.Context, req *lottery.GetPrizeByAidRequest, callOptions ...callopt.Option) (r *lottery.PrizesResponse, err error)
	GetPrizeById(ctx context.Context, req *lottery.GetPrizeByIdRequest, callOptions ...callopt.Option) (r *lottery.PrizeResponse, err error)
	Choose(ctx context.Context, callOptions ...callopt.Option) (r *lottery.ChooseResponse, err error)
	GetUserOrder(ctx context.Context, req *lottery.GetUserOrderRequest, callOptions ...callopt.Option) (r *lottery.OrdersResponse, err error)
	GetAllOrder(ctx context.Context, req *lottery.GetAllOrderRequest, callOptions ...callopt.Option) (r *lottery.OrdersResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kLotteryServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kLotteryServiceClient struct {
	*kClient
}

func (p *kLotteryServiceClient) ActivityAdd(ctx context.Context, req *lottery.ActivityAddRequest, callOptions ...callopt.Option) (r *lottery.BaseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ActivityAdd(ctx, req)
}

func (p *kLotteryServiceClient) ActivityDel(ctx context.Context, req *lottery.ActivityDelRequest, callOptions ...callopt.Option) (r *lottery.BaseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ActivityDel(ctx, req)
}

func (p *kLotteryServiceClient) ActivityUpdate(ctx context.Context, req *lottery.ActivityUpdateRequest, callOptions ...callopt.Option) (r *lottery.BaseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ActivityUpdate(ctx, req)
}

func (p *kLotteryServiceClient) GetActivityByGid(ctx context.Context, req *lottery.GetActivityByGidRequest, callOptions ...callopt.Option) (r *lottery.ActivitysResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetActivityByGid(ctx, req)
}

func (p *kLotteryServiceClient) GetAllActivity(ctx context.Context, req *lottery.GetAllActivityRequest, callOptions ...callopt.Option) (r *lottery.ActivitysResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetAllActivity(ctx, req)
}

func (p *kLotteryServiceClient) GetActivityById(ctx context.Context, req *lottery.GetActivityByIdRequest, callOptions ...callopt.Option) (r *lottery.ActivityResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetActivityById(ctx, req)
}

func (p *kLotteryServiceClient) PrizeAdd(ctx context.Context, req *lottery.PrizeAddRequest, callOptions ...callopt.Option) (r *lottery.BaseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PrizeAdd(ctx, req)
}

func (p *kLotteryServiceClient) PrizeDel(ctx context.Context, req *lottery.PrizeDelRequest, callOptions ...callopt.Option) (r *lottery.BaseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PrizeDel(ctx, req)
}

func (p *kLotteryServiceClient) PrizeUpdate(ctx context.Context, req *lottery.PrizeUpdateRequest, callOptions ...callopt.Option) (r *lottery.BaseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PrizeUpdate(ctx, req)
}

func (p *kLotteryServiceClient) GetPrizeByAid(ctx context.Context, req *lottery.GetPrizeByAidRequest, callOptions ...callopt.Option) (r *lottery.PrizesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPrizeByAid(ctx, req)
}

func (p *kLotteryServiceClient) GetPrizeById(ctx context.Context, req *lottery.GetPrizeByIdRequest, callOptions ...callopt.Option) (r *lottery.PrizeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPrizeById(ctx, req)
}

func (p *kLotteryServiceClient) Choose(ctx context.Context, callOptions ...callopt.Option) (r *lottery.ChooseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Choose(ctx)
}

func (p *kLotteryServiceClient) GetUserOrder(ctx context.Context, req *lottery.GetUserOrderRequest, callOptions ...callopt.Option) (r *lottery.OrdersResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserOrder(ctx, req)
}

func (p *kLotteryServiceClient) GetAllOrder(ctx context.Context, req *lottery.GetAllOrderRequest, callOptions ...callopt.Option) (r *lottery.OrdersResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetAllOrder(ctx, req)
}
